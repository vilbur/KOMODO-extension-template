{"keyboard_shortcut":"","name":"UI","language":"JavaScript","trigger_enabled":false,"value":["/** UI\r","* Manage extension`s ui elements\r","*\r","*/\r","ko.extensions.TemplateExtension.Komodo.UI = (function()\r","{\r","\t\t\r","\tfunction UI()\r","\t{\r","\t\t//var Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(false).off(false) : require('ko/console');\r","\t\tvar self\t= this;\r","\t\tvar $\t= require('ko/dom');\r","\t\tvar document\t= document;\t\t\r","\r","\t\t/*---------------------------------------\r","\t\t\tSETUP\r","\t\t-----------------------------------------\r","\t\t*/\r","\t\t/** Set document where UI is operating, pane or preferences window\r","\t\t *\r","\t\t * @param\tstring\t_document\r","\t\t * @return\tself \r","\t\t */\r","\t\tthis.document = function(_document)\r","\t\t{\r","\t\t\tdocument = _document;\r","\t\t\treturn this;\r","\t\t};\r","\r","\t\t/** Query selector in document\r","\t\t * \r","\t\t * @param\tstring\tselector\tSelector of node\r","\t\t * @param\tstring\tselector\tSelector of parent, if null, then current document is used\r","\t\t * \r","\t\t * @return\ttype\t[QueryObject](https://docs.activestate.com/komodo/11/sdk/api/module-ko_dom-QueryObject.html)\r","\t\t */\r","\t\tthis.$ = function(selector, parent=null)\r","\t\t{\r","\t\t\t//if( ! selector.match(/^[#\\.]/) )\r","\t\t\t//\tselector = '#' +selector;\r","\t\t\tparent = parent ? this.$(parent).element() : document;\r","\r","\t\t\treturn $(selector, parent);\r","\t\t};\r","\t\t/** Create dom element or array of elements\r","\t\t * \r","\t\t * @example \r","\t\t *\t\t.create('checkbox', 'Checkbox 1')\t// single node, attribute is label\r","\t\t *\t\t.create('checkbox', {label: 'Checkbox 1'})\t// single node with attributes\t\t \r","\t\t *\t\t.create('checkbox', ['Checkbox 1', 'Checkbox 2'])\t// multiple nodes\r","\t\t *\t\t.create('checkbox', [{label: 'Checkbox 1'}, {label: 'Checkbox 2'}])\t// multiple nodes with attributes\r","\t\t *\r","\t\t *\t\t.create('groupbox')\t// node without attributes\r","\t\t *\t\t.create('groupbox', {id: 'gp_id'})\t// node with attributes\r","\t\t *\t\t.create('groupbox', null, ['checkbox', ['Checkbox 1', 'Checkbox 2']] )\t// node with children\r","\t\t *\t\t.create('groupbox', {id: 'gp_id'}, ['checkbox', ['Checkbox 1', 'Checkbox 2']] )\t// node with attributes and children\r","\t\t *\r","\t\t * @param\tstring\ttype\tType of node to append\r","\t\t * @param\tnull|string|object|[object] \t[attributes]\tAttributes for controls, define array of strings or array of objects for adding multiple nodes \r","\t\t * @param\t[type, attributes]\tchildren\tArray of attributes [type, attributes, create] for nested loop of create() function\r","\t\t * \r","\t\t * @return element|[elements] created node or array of created nodes\r","\t\t */\r","\t\tthis.create = function(type, attributes=null, children=null)\r","\t\t{\r","\t\t\t//console.log( 'UI.create()' );\r","\r","\t\t\t/** Sanitize attributes\r","\t\t\t */\r","\t\t\tattributes = (function()\r","\t\t\t{\r","\t\t\t\treturn ! attributes ? [{}] : ( ! Array.isArray(attributes) ? [attributes] : attributes );\t\t\t\t\r","\t\t\t})();\r","\r","\t\t\tvar created_nodes = attributes.map(function(node_attributes)\r","\t\t\t{\r","\t\t\t\treturn new ko.extensions.TemplateExtension.Komodo.Node()\r","\t\t\t\t\t\t\t\t\t\t\t .type(type)\t\t\t\t\t\t\t\t\t\t\t\t\t \r","\t\t\t\t\t\t\t\t\t\t\t .attributes(node_attributes)\r","\t\t\t\t \t\t\t\t\t\t\t .get();\r","\t\t\t});\r","\t\t\t//console.log( created_nodes );\r","\t\t\t/** Last node\r","\t\t\t */\r","\t\t\tvar lastNode = created_nodes[created_nodes.length-1];\r","\t\t\t\r","\t\t\tif( children )\r","\t\t\t\tthis.append( lastNode, this.create(children[0], children[1], children[2]) );\r","\t\t\t\r","\t\t\treturn created_nodes.length > 1 ? created_nodes : created_nodes.pop() ;\r","\t\t}; \r","\r","\t\t/** Get values of parent node controls\r","\t\t * @param\tstring\tselector\r","\t\t * @param\tmixed\tonly_prefs\tif not false, then take only nodes without attribute prefs=\"false\"\r","\t\t * @return\t{id: value}\tObject of node ids and values\r","\t\t */\r","\t\tthis.values = function(selector, only_prefs=false)\r","\t\t{\r","\t\t\tvar values\t= {};\r","\r","\t\t\t/** Get values form child nodes\r","\t\t\t * @param\tarray\tchild_nodes\tElement list of child nodes\r","\t\t\t */\r","\t\t\tvar setValuesFormChildNodes = function(child_nodes)\r","\t\t\t{\r","\t\t\t\t/** Test if getting only preferences,\r","\t\t\t\t * \t\tif so, then if control has not attribute prefs=\"false\"\r","\t\t\t\t */\r","\t\t\t\tvar preference = function(element)\r","\t\t\t\t{\r","\t\t\t\t\treturn only_prefs===false || element.getAttribute('prefs')!=='false';\r","\t\t\t\t}; \r","\t\t\t\t\r","\t\t\t\tchild_nodes.each(function()\r","\t\t\t\t{\r","\t\t\t\t\tif( ! Object.keys(this.childNodes).length ){\r","\t\t\t\t\t\t//console.log(  this.id +':'+ preference(this) );\r","\t\t\t\t\t\tif( this.id && preference(this) )\r","\t\t\t\t\t\t\tvalues[this.id] = this.nodeName == 'checkbox' ? this.checked : this.value;\r","\t\t\t\t\t\t\t\r","\t\t\t\t\t}else\r","\t\t\t\t\t\tsetValuesFormChildNodes( $(this.childNodes) );\r","\t\t\t\t});\r","\t\t\t}; \r","\r","\t\t\tsetValuesFormChildNodes( this.$(selector).children() );\r","\t\t\t\r","\t\t\treturn values;\r","\t\t};\r","\r","\t\t/** Append new children to node\r","\t\t *\r","\t\t * @param\tnode|string \tparent\tNode element or selector of parent to append children\r","\t\t * @param\telement|array\telements\tElement to append\r","\t\t * \r","\t\t * @return\tself \r","\t\t */\r","\t\tthis.append = function( parent, elements )\r","\t\t{\r","\t\t\t//console.log( 'UI.append()' );\r","\t\t\t//console.log( elements );\r","\t\t\tparent = this.$(parent);\r","\t\t\t\r","\t\t\tif( ! Array.isArray(elements) )\r","\t\t\t\telements = [elements];\t\r","\t\t\t\r","\t\t\tfor(let e=0; e<elements.length;e++)\r","\t\t\t\tparent.append( elements[e] );\r","\r","\t\t\treturn this;\r","\t\t};\r","\t\t\r","\t\t/** Remove child element\r","\t\t * @param\tstring\tselector\tSelector of node\r","\t\t * @return\tself\r","\t\t */\r","\t\tthis.empty = function(selector=null)\r","\t\t{\r","\t\t\tthis.$(selector, parent).empty();\r","\t\t\t\r","\t\t\treturn this;\r","\t\t};\r","\t\t\r","\t\t/** Create prefset dom with menu and toggable containers with controls\r","\t\t *\r","\t\t * @param\tstring\tprefset_selector\tId of dom wrapper where menu abd all containers are inserted\r","\t\t * @param\tobject\tperfset_template\tRepresentation of container xul structure\r","\t\t * @param\tobject\tperfset_values\tData for pref set`s controls\r","\t\t *\r","\t\t * @example\r","\t\t *\t\tperfset_template = {\r","\t\t *\t\t\tpref_set_test:{ groupbox: ['checkbox', 'checkbox'] }\r","\t\t * \t\t}\r","\t\t * \r","\t\t * \t\tperfset_values = {\r","\t\t *\t\t\t'conteiner-A':{\r","\t\t * \t\t\t\t'Control 1': true,\r","\t\t * \t\t\t\t'Control 2': false,\r","\t\t * \t\t\t}\r","\t\t * \t\t}\r","\t\t * \r","\t\t */\r","\t\tthis.createPrefSet = function(prefset_selector, perfset_template, perfset_values)\r","\t\t{\r","\t\t\tvar container_type\t= Object.keys(perfset_template).pop();\t\t\t\r","\t\t\tvar control_types\t= perfset_template[container_type];\r","\t\t\tvar containers_ids\t= Object.keys(perfset_values);\t\t\r","\t\t\tconsole.log(  'prefset_selector: ' + prefset_selector );\r","\t\t\t/** prefset_menu\r","\t\t\t */\r","\t\t\tvar addMenu = (function()\r","\t\t\t{\r","\t\t\t\tself.append( prefset_selector, self.create('menulist', null, ['menupopup']) );\r","\t\t\t})(); \r","\r","\t\t\t/** Create perfset_template\r","\t\t\t *\r","\t\t\t * @param\tobject\tcontrols_data\tContainer-id: {control id-label: value}\r","\t\t\t */\r","\t\t\tvar createContainer = function(container_index, container_id, controls_data)\r","\t\t\t{\r","\t\t\t\tvar class_shown\t= prefset_selector+'-shown';\r","\t\t\t\tvar controls_labels\t= Object.keys(controls_data);\r","\t\t\t\t\r","\t\t\t\t/** container\r","\t\t\t\t */\r","\t\t\t\tvar container = (function()\r","\t\t\t\t{\r","\t\t\t\t\tvar _class\t= container_index===0 ? class_shown \t: '';\r","\t\t\t\t\tvar display\t= container_index===0 ? 'block'\t: 'none';\r","\t\t\t\t\tvar element\t= self.create(container_type, {id: container_id, class:class_shown , style:'display:'+display});\r","\t\t\t\t\t\r","\t\t\t\t\tself.append( prefset_selector, element);\r","\t\t\t\t\treturn element;\r","\t\t\t\t})(); \r","\t\t\t\t\r","\t\t\t\t/** addMenuItem\r","\t\t\t\t */\r","\t\t\t\tvar addMenuItem = (function()\r","\t\t\t\t{\r","\t\t\t\t\tvar toggle_containers= [\r","\t\t\t\t\t\t\"var class_shown='\"+class_shown+\"'\",\r","\t\t\t\t\t\t\"var element_hide=document.getElementsByClassName(class_shown)[0]\",\r","\t\t\t\t\t\t\"var element_show=document.getElementById('\"+container.getAttribute('id')+\"')\",\r","\t\t\t\t\t\t\r","\t\t\t\t\t\t\"if(element_hide==element_show)return\", // return if clicked same element\r","\t\t\t\t\t\t\r","\t\t\t\t\t\t\"element_show.classList.add(class_shown)\", // show new container\r","\t\t\t\t\t\t\"element_show.style.display = 'block'\",\r","\r","\t\t\t\t\t\t\"element_hide.classList.remove(class_shown)\", // hide old element\r","\t\t\t\t\t\t\"element_hide.style.display = 'none'\",\r","\t\t\t\t\t];\r","\t\t\t\t\t\r","\t\t\t\t\tvar menu_item\t= self.create('menuitem', {label: container_id, oncommand: toggle_containers.join(';')} );\r","\r","\t\t\t\t\tself.append( prefset_selector + ' menupopup', menu_item );\r","\t\t\t\t})(); \r","\t\t\t\t  \r","\t\t\t\t/** Append control to container\r","\t\t\t\t */\r","\t\t\t\tvar appendControlToContainer = function(index)\r","\t\t\t\t{\r","\t\t\t\t\tvar control_type\t= control_types[index];\r","\t\t\t\t\tvar data\t=  {'label': controls_labels[index], 'checked':controls_data[controls_labels[index]] };\r","\r","\t\t\t\t\tself.append( '#'+container_id,  self.create(control_type, data) );\r","\t\t\t\t}; \r","\t\t\t\t\r","\t\t\t\tfor(let c=0; c<controls_labels.length;c++)\r","\t\t\t\t\tappendControlToContainer(c);\r","\t\t\t};\r","\t\t\t\r","\t\t\tconsole.log( containers_ids );\r","\t\t\tfor(let i=0; i<containers_ids.length;i++)\r","\t\t\t\tcreateContainer(i, containers_ids[i], perfset_values[containers_ids[i]] );\r","\t\t\t\t\r","\t\t\tself.$( prefset_selector + ' menulist' ).element().selectedIndex = 0;\r","\r","\t\t};\r","\t\r","\t\t/** Test\r","\t\t */\r","\t\tthis.test = function(string='')\r","\t\t{\r","\t\t\talert('UI.test('+string+')');\r","\t\t};\r","\t\t\r","\t}\r","\treturn UI;\r","\r","})();"],"version":"1.0.12","rank":100,"async":false,"type":"macro","trigger":"trigger_postopen"}