{"keyboard_shortcut":"","name":"UI","language":"JavaScript","trigger_enabled":false,"value":["/** UI\r","* Manage extension`s ui elements\r","*\r","*/\r","ko.extensions.TemplateExtension.Komodo.UI = (function()\r","{\r","\tfunction UI()\r","\t{\r","\t\tvar self\t= this;\r","\t\tvar $\t= require('ko/dom');\r","\t\tvar document\t= document;\t\t\r","\r","\t\t/*---------------------------------------\r","\t\t\tSETUP\r","\t\t-----------------------------------------\r","\t\t*/\r","\t\t/** Set document where UI is operating, pane or preferences window\r","\t\t *\r","\t\t * @param\tstring\t_document\r","\t\t * @return\tself \r","\t\t */\r","\t\tthis.document = function(_document)\r","\t\t{\r","\t\t\tdocument = _document;\r","\t\t\treturn this;\r","\t\t};\r","\r","\t\t/** Query selector in document\r","\t\t * \r","\t\t * @param\tstring\tselector\tSelector of node\r","\t\t * @param\tstring\tselector\tSelector of parent, if null, then current document is used\r","\t\t * \r","\t\t * @return\ttype\t[QueryObject](https://docs.activestate.com/komodo/11/sdk/api/module-ko_dom-QueryObject.html)\r","\t\t */\r","\t\tthis.$ = function(selector, parent=null)\r","\t\t{\r","\t\t\t//if( ! selector.match(/^[#\\.]/) )\r","\t\t\t//\tselector = '#' +selector;\r","\t\t\tparent = parent ? this.$(parent).element() : document;\r","\r","\t\t\treturn $(selector, parent);\r","\t\t};\r","\t\t/** Exists\r","\t\t */\r","\t\tthis.exists = function(selector, parent=null)\r","\t\t{\r","\t\t\treturn typeof this.$(selector, parent).element()!=='undefined'; \r","\t\t}; \r","\t\t/** Create dom element or array of elements\r","\t\t * \r","\t\t * @example \r","\t\t *\t\t.create('checkbox', 'Checkbox 1')\t// single node, attribute is label\r","\t\t *\t\t.create('checkbox', {label: 'Checkbox 1'})\t// single node with attributes\t\t \r","\t\t *\t\t.create('checkbox', ['Checkbox 1', 'Checkbox 2'])\t// multiple nodes\r","\t\t *\t\t.create('checkbox', [{label: 'Checkbox 1'}, {label: 'Checkbox 2'}])\t// multiple nodes with attributes\r","\t\t *\r","\t\t *\t\t.create('groupbox')\t// node without attributes\r","\t\t *\t\t.create('groupbox', {id: 'gp_id'})\t// node with attributes\r","\t\t *\t\t.create('groupbox', null, ['checkbox', ['Checkbox 1', 'Checkbox 2']] )\t// node with children\r","\t\t *\t\t.create('groupbox', {id: 'gp_id'}, ['checkbox', ['Checkbox 1', 'Checkbox 2']] )\t// node with attributes and children\r","\t\t *\r","\t\t * @param\tstring\ttype\tType of node to append\r","\t\t * @param\tnull|string|object|[object] \t[attributes]\tAttributes for controls, define array of strings or array of objects for adding multiple nodes \r","\t\t * @param\t[type, attributes]\tchildren\tArray of attributes [type, attributes, create] for nested loop of create() function\r","\t\t * \r","\t\t * @return element|[elements] created node or array of created nodes\r","\t\t */\r","\t\tthis.create = function(type, attributes=null, children=null)\r","\t\t{\r","\t\t\t//console.log('UI.create(\"'+type+'\")'); \r","\t\t\t/** Sanitize attributes\r","\t\t\t */\r","\t\t\tattributes = (function()\r","\t\t\t{\r","\t\t\t\treturn ! attributes ? [{}] : ( ! Array.isArray(attributes) ? [attributes] : attributes );\t\t\t\t\r","\t\t\t})();\r","\r","\t\t\tvar created_nodes = attributes.map(function(node_attributes)\r","\t\t\t{\r","\t\t\t\t//console.log(  'created_nodes: ' + type +' '+node_attributes.id );\r","\t\t\t\treturn new ko.extensions.TemplateExtension.Komodo.Node()\r","\t\t\t\t\t\t\t\t\t\t\t .type(type)\t\t\t\t\t\t\t\t\t\t\t\t\t \r","\t\t\t\t\t\t\t\t\t\t\t .attributes(node_attributes)\r","\t\t\t\t \t\t\t\t\t\t\t .get();\r","\t\t\t});\r"," \r","\t\t\t/** Last node\r","\t\t\t */\r","\t\t\tvar lastNode = created_nodes[created_nodes.length-1];\r","\t\t\t\r","\t\t\tif( children )\r","\t\t\t\tlastNode.appendChild ( this.create(children[0], children[1], children[2]) );\r","\t\t\t\r","\t\t\treturn created_nodes.length > 1 ? created_nodes : lastNode ;\r","\t\t};\r","\t\t/** Delete Node\r","\t\t */\r","\t\tthis.delete = function(selector_or_element, parent=null)\r","\t\t{\r","\t\t\tvar element\t= typeof selector_or_element === 'string' ? this.$(selector_or_element, parent) : selector_or_element;\r","\t\t\telement.parentNode.removeChild(element);\r","\t\t};\r","\t\t\r","\t\t/** Get\\Set values of controls\r","\t\t * @param\tstring\tparam1\r","\t\t * @param\tmixed\tparam2\tif not false, then take only nodes without attribute prefs=\"false\"\r","\t\t * @return\t{id: value}\tObject of node ids and values\r","\t\t *\r","\t\t * @example values()\t// GET all values from docuent\r","\t\t * @example values('id')\t// GET all values from element\r","\t\t * @example values('only-prefs')\t// GET prefs values from docuent\r","\t\t * @example values('id', 'only-prefs')\t// GET prefs values from element\r","\t\t * \r","\t\t * @example values({'id': 'value to set'})\t// mass SET values by object\r","\t\t * \r","\t\t */\r","\t\tthis.values = function(param1, param2=false)\r","\t\t{\r","\t\t\tconsole.log(  'UI.values()' );\r","\r","\t\t\treturn typeof param1 === 'object' ? setValues(param1) : getValues(param1, param2) ;\r","\t\t};\r","\t\t\r","\t\t/** Get\\Set element value\r","\t\t *\r","\t\t * @param\tstring\tparam1\tSelector of element to get\\set value\r","\t\t * @param\tstring\tparam2\tValue of element to set\r","\t\t * @return mixed          Current value of element \r","\t\t *\r","\t\t * @example value('#selector')\t// get value of element\r","\t\t * @example value('#selector', 'value')\t// set value to element\r","\t\t */\r","\t\tthis.value = function(param1=null, param2=null)\r","\t\t{\r","\t\t\tvar element\t= typeof param1 === 'string' ? this.$(param1).element() : param1;\r","\t\t\t\r","\t\t\treturn param2 ? setValue(element, param2) : getValue(element);\r","\t\t};\r","\r","\t\t/** Append new children to node\r","\t\t *\r","\t\t * @param\tnode|string \tparent\tNode element or selector of parent to append children\r","\t\t * @param\telement|array\telements\tElement to append\r","\t\t * \r","\t\t * @return\tself \r","\t\t */\r","\t\tthis.append = function( parent_selector, elements )\r","\t\t{\r","\t\t\t//console.log( 'UI.append()' );\r","\t\t\t//console.log( elements );\r","\t\t\tparent = this.$(parent_selector);\r","\t\t\t\r","\t\t\t/** Parent id exists\r","\t\t\t *  it should EXISTS\r","\t\t\t */\r","\t\t\tvar parentIdExists = function()\r","\t\t\t{\r","\t\t\t\tif( self.exists(parent_selector) )\r","\t\t\t\t\treturn true;\r","\t\t\t\t\r","\t\t\t\talert( 'UI.append()\\n\\nPARENT ELEMENT DOES NOT EXISTS: '+parent_selector );\r","\t\t\t\treturn false;\r","\t\t\t}; \r","\t\t\t\r","\t\t\t///** Id not exists\r","\t\t\t// *  it should NOT EXISTS\r","\t\t\t// */\r","\t\t\t//var childIdExists = function(id)\r","\t\t\t//{\r","\t\t\t//\tconsole.log('childIdExists: '+id); \r","\t\t\t//\t//if( ! id || ! self.exists('#'+id, parent) )\r","\t\t\t//\tif( ! self.exists('#'+id) )\t\t\t\r","\t\t\t//\t\treturn false;\r","\t\t\t//\t\r","\t\t\t//\t//alert( 'UI.append()\\n\\nCHILD ID ALREADY EXISTS: #'+id );\r","\t\t\t//\talert( 'UI.append()\\n\\nChild in parent alerady exists\\n\\nPARENT: '+parent_selector+'\\nCHILD:    #'+id );\t\t\t\t\r","\t\t\t//\treturn true;\r","\t\t\t//};\r","\t\t\t\r","\t\t\tif( ! parentIdExists() )\r","\t\t\t\treturn;\r","\t\t\t \r","\t\t\tif( ! Array.isArray(elements) )\r","\t\t\t\telements = [elements];\t\r","\t\t\t\r","\t\t\tfor(let e=0; e<elements.length;e++)\r","\t\t\t\tparent.element().appendChild( elements[e] );\t\t\t\t\r","\t\t\t\r","\t\t\treturn this;\r","\t\t};\r","\t\t\r","\t\t/** Remove child element\r","\t\t * @param\tstring\tselector\tSelector of node\r","\t\t * @return\tself\r","\t\t */\r","\t\tthis.empty = function(selector, parent=null)\r","\t\t{\r","\t\t\tthis.$(selector, parent).empty();\r","\t\t\t\r","\t\t\treturn this;\r","\t\t};\r","\t\t/*---------------------------------------\r","\t\t\tPREFSET DOM\r","\t\t-----------------------------------------\r","\t\t*/\r","\t\t/** Create prefset dom with menu and toggable containers with controls.\r","\t\t * If exist, then prefset will be refreshed\r","\t\t *\r","\t\t * @param\tstring\tcontrolset_selector\tId of wrapper element where menu and all containers are inserted\r","\t\t * @param\tobject\tmarkup_template\tRepresentation of container xul structure\r","\t\t * @param\tobject\tset_values\tData for pref set`s controls\r","\t\t *\r","\t\t * @example\r","\t\t *\t\tmarkup_template = { 'Prefset Caption': ['checkbox', 'textbox'] };\r","\t\t * \r","\t\t * \t\tset_values = {\r","\t\t *\t\t\t'Container A':{\r","\t\t * \t\t\t\t'Control A':\ttrue,\r","\t\t * \t\t\t\tEnter Text A':\t'Foo Text A',\r","\t\t * \t\t\t}\r","\t\t * \t\t};\r","\t\t * \r","\t\t */\r","\t\tthis.controlset = function(controlset_selector, set_values)\r","\t\t{\r","\t\t\t//self.$( controlset_selector ).empty();\r","\t\t\treturn  new ko.extensions.TemplateExtension.Komodo.Controls.ControlSet().document(document);\r","\t\t\t//console.log( self.$( controlset_selector ).element().outerHTML ); // DEBUG: get element as plain text\r","\t\t};\r","\t\t\r","\t\tthis.controlsetAddRemove = function(controlset_selector, add_remove)\r","\t\t{\r","\t\t\tvar container_label\t= require(\"ko/dialogs\").prompt('Add new set name '+controlset_selector);\r","\r","\t\t\tthis.$(controlset_selector).find('menupopup').first().append( this.create('menuitem', container_label) );\r","\t\t\t\r","\t\t\tvar controlset_container\t= new ko.extensions.TemplateExtension.Komodo.Controls.ControlSet()\r","\t\t\t\t.container(container_label, JSON.parse( this.$(controlset_selector).attr('template') ));\r","\r","\t\t\tthis.$(controlset_selector).append( controlset_container );\r","\t\t};\r","\t\t/** Create dropdown element\r","\t\t * @param\tstring\tid\tId of dropdown element\r","\t\t * @param\tobject\titems\tItems for dropdown \r","\t\t * @param\tstring\t[menu_text]\tText in dropdown menu button, if null then current item is shown\r","\t\t *\r","\t\t * @return\t[element](https://developer.mozilla.org/en-US/docs/Web/API/Element)\r","\t\t *\r","\t\t * @example dropdown('#dropdown_test',\t{'Item A':'alert(\"A\")','Item B':'alert(\"B\")'})\r","\t\t * @example dropdown('#dropdown_text_test',\t{'Item A':{tooltip: 'Item A'},'Item B':{style: 'border:green;'}}, 'Attributes & label')\r","\t\t *\r","\t\t */\r","\t\tthis.dropdown = function(id, items, menu_text=null)\r","\t\t{\r","\t\t\tvar menulist\t= menu_text ? self.create('button', {label: menu_text, type: \"menu\", id: sanitizeId(id) }) : self.create('menulist', {id: sanitizeId(id)});\r","\t\t\tvar menupopup\t= self.create('menupopup');\r","\r","\t\t\t/** Get item simple\r","\t\t\t */\r","\t\t\tvar getItemSimple = function(label, _attributes)\r","\t\t\t{\r","\t\t\t\tvar attributes = {label: label};\r","\t\t\t\t\r","\t\t\t\tif( typeof _attributes === 'object' ){\r","\t\t\t\t\tfor(var attr in _attributes)\r","\t\t\t\t\t\tif (_attributes.hasOwnProperty(attr))\r","\t\t\t\t\t\t\tattributes[attr] = _attributes[attr];\r","\t\t\t\t\t\t\t//var value = _attributes[attr];\r","\t\t\t\t}else\r","\t\t\t\t\tattributes.oncommand = _attributes;\r","\t\t\t\t\r","\t\t\t\treturn self.create('menuitem', attributes );\r","\t\t\t}; \r","\t\t\t\r","\t\t\tfor(var label in items)\r","\t\t\t\tif (items.hasOwnProperty(label))\r","\t\t\t\t\tmenupopup.appendChild( getItemSimple(label, items[label]) );\r","\t\t\t\t\t\r","\t\t\tmenulist.appendChild( menupopup );\r","\t\t\t\r","\t\t\t//console.log( menulist.outerHTML ); // DEBUG: get element as plain text\r","\r","\t\t\treturn  menulist;\r","\t\t}; \r","\t\t\r","\t\t/*---------------------------------------\r","\t\t\tPRIVATE VALUE METHODS\r","\t\t-----------------------------------------\r","\t\t*/\r","\t\t/** Get values from controls\r","\t\t *\r","\t\t * @param\tstring\tselector\tSelector of node or parent nodes whereto get values\r","\t\t * @param\tmixed\tonly_prefs\tIf not false then only elements withthout attribute prefs=\"false\" will be processed\r","\t\t * @return\t{id: value}\t            Object with elements ids and current values\r","\t\t */\r","\t\tvar getValues = function(selector, only_prefs=false)\r","\t\t{\r","\t\t\tvar values\t= {};\r","\t\t\t\r","\t\t\t/** Test if getting only preferences,\r","\t\t\t* \t\tif so, then if control has not \r","\t\t\t*/\r","\t\t\tvar preferenceTest = function(element)\r","\t\t\t{\r","\t\t\t\treturn only_prefs===false || element.getAttribute('prefs')!=='false';\r","\t\t\t}; \r","\t\t\t/** Set to value to values object\r","\t\t\t */\r","\t\t\tvar setToValues = function(id, value)\r","\t\t\t{\r","\t\t\t\t//console.log(  'setToValues(): ' + id +', '+ value );\r","\t\t\t\tif( value!==null )\r","\t\t\t\t\tvalues[id] = value;\r","\t\t\t};\r","\t\t\t \r","\t\t\t/** Get prefset values\r","\t\t\t */\r","\t\t\tvar getPrefsetValues = function(prefset_id)\r","\t\t\t{\r","\t\t\t\tvar prefset_values\t= {};\r","\r","\t\t\t\t/** Loop containers\r","\t\t\t\t */\r","\t\t\t\tvar loopContainers = function()\r","\t\t\t\t{\r","\t\t\t\t\t/** Get elements values\r","\t\t\t\t\t */\r","\t\t\t\t\tvar getElementsValues = function(container)\r","\t\t\t\t\t{\r","\t\t\t\t\t\tvar prefset_values\t= {};\r","\r","\t\t\t\t\t\t$(container).children().each(function()\r","\t\t\t\t\t\t{\r","\t\t\t\t\t\t\tvar value = preferenceTest() ? self.value( this ) : null;\r","\t\t\t\t\t\t\t\r","\t\t\t\t\t\t\tif( value )\r","\t\t\t\t\t\t\t\tprefset_values[this.id] = value;\r","\t\t\t\t\t\t});\r","\t\t\t\t\t\treturn prefset_values;\r","\t\t\t\t\t}; \r","\t\t\t\t\t\r","\t\t\t\t\tself.$('#'+prefset_id +' .prefset-container').each(function()\r","\t\t\t\t\t{\t\r","\t\t\t\t\t\tprefset_values[this.getAttribute('label')] = getElementsValues(this);\r","\t\t\t\t\t});\r","\t\t\t\t}; \r","\t\t\t\tloopContainers();\r","\r","\t\t\t\treturn prefset_values;\r","\t\t\t};\r","\t\t\t\r","\t\t\t/** Get values form child nodes\r","\t\t\t * @param\tarray\tchild_nodes\tElement list of child nodes\r","\t\t\t */\r","\t\t\tvar loopNestedElements = function(child_nodes)\r","\t\t\t{\r","\t\t\t\t//console.log('loopNestedElements');\r","\t\t\t\t//console.log( child_nodes );\r","\t\t\t\tchild_nodes.each(function()\r","\t\t\t\t{\r","\t\t\t\t\tvar id\t= this.getAttribute('id');\r","\t\t\t\t\t//console.log( '-----child_node: '+id );\r","\t\t\t\t\t//console.log( this );\r","\t\t\t\t\t//console.log( ! Object.keys(this.childNodes).length );\r","\t\t\t\t\t\r","\t\t\t\t\tif( ! Object.keys(this.childNodes).length ){\r","\t\t\t\t\t\tif( preferenceTest(this) )\r","\t\t\t\t\t\t\tsetToValues( id, self.value(this) );\r","\t\t\t\t\t\t\t\t\r","\t\t\t\t\t}else if( this.hasAttribute('prefset') )\r","\t\t\t\t\t\t//console.log(  'PREF SET: ' + id );\r","\t\t\t\t\t\tsetToValues( id, getPrefsetValues(id) );\r","\t\t\t\t\t\r","\t\t\t\t\telse\r","\t\t\t\t\t\tloopNestedElements( $(this.childNodes) );\r","\t\t\t\t});\r","\t\t\t}; \r","\r","\t\t\tloopNestedElements( self.$(selector).children() );\r","\t\t\t\r","\t\t\treturn values;\r","\t\t};\r","\r","\t\t/** Set values to elements\r","\t\t * @param\t{id: value}\tvalues_data\tObject with ids and valuest to set\r","\t\t */\r","\t\tvar setValues = function(values_data)\r","\t\t{\r","\t\t\tfor(var id in values_data)\r","\t\t\t\tif (values_data.hasOwnProperty(id))\r","\t\t\t\t\tsetValue( '#' + id,  values_data[id] );\r","\t\t};\r","\r","\t\t/** Get element value\r","\t\t * @param\tobject\telement\tElement node for get value\r","\t\t */\r","\t\tvar getValue = function(element)\r","\t\t{\r","\t\t\t/** I element type node\r","\t\t\t*/\r","\t\t\tvar is_control_node = ['checkbox','textbox','radio'].indexOf( element.nodeName ) > -1;\r","\t\t\t\r","\t\t\tif( element.id && is_control_node )\r","\t\t\t\treturn element.nodeName == 'checkbox' ? element.checked : element.value;\r","\t\t\t\r","\t\t\treturn null;\r","\t\t};\r","\t\t\r","\t\t/** Set element value\r","\t\t * @param\tstring\tselector\tSelector of element for set value\r","\t\t * @param\tmixed\tvalue\tValue of element\r","\t\t */\r","\t\tvar setValue = function(selector, value)\r","\t\t{\r","\t\t\tconsole.log(  'setValue()' );\r","\t\t\tconsole.log( selector );\r","\t\t\tconsole.log( value );\r","\t\t\t\r","\t\t\tvar element\t= self.$(selector).element();\r","\t\t\t\r","\t\t\tif( element.nodeName === 'checkbox' )\r","\t\t\t\t element.checked = value;\r","\t\t\t\r","\t\t\telse\r","\t\t\t\telement.value = value;\r","\t\t}; \r","\t\r","\t\t/** Get sanitized id\r","\t\t */\r","\t\tvar sanitizeId = function(id)\r","\t\t{\r","\t\t\treturn id.replace(/[^a-z0-9\\s-_]/gi, '').replace(/\\s+/gi, '_').trim().toLowerCase();\r","\t\t};\r","\t\r","\t}\r","\treturn UI;\r","\r","})();"],"version":"1.0.12","rank":100,"async":false,"type":"macro","trigger":"trigger_postopen"}