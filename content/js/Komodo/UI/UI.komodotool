{
  "keyboard_shortcut": "", 
  "name": "UI", 
  "language": "JavaScript", 
  "trigger_enabled": false, 
  "value": [
    "/** UI", 
    "* Manage extension`s ui elements", 
    "*", 
    "*/", 
    "ko.extensions.TemplateExtension.Komodo.UI = (function()", 
    "{", 
    "\tfunction UI()", 
    "\t{", 
    "\t\tvar self\t= this;", 
    "\t\tvar $\t= require('ko/dom');", 
    "\t\tvar document\t= document;\t\t", 
    "\t\tvar control_types\t= ['checkbox','textbox','radio'];", 
    "\t\t/*---------------------------------------", 
    "\t\t\tSETUP", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** Set document where UI is operating, pane or preferences window", 
    "\t\t *", 
    "\t\t * @param\tstring\t_document", 
    "\t\t * @return\tself ", 
    "\t\t */", 
    "\t\tthis.document = function(_document)", 
    "\t\t{", 
    "\t\t\tdocument = _document;", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "", 
    "\t\t/** Query selector in document", 
    "\t\t * ", 
    "\t\t * @param\tstring\tselector\tSelector of node", 
    "\t\t * @param\tstring\tselector\tSelector of parent, if null, then current document is used", 
    "\t\t * ", 
    "\t\t * @return\ttype\t[QueryObject](https://docs.activestate.com/komodo/11/sdk/api/module-ko_dom-QueryObject.html)", 
    "\t\t */", 
    "\t\tthis.$ = function(selector, parent=null)", 
    "\t\t{", 
    "\t\t\t//if( ! selector.match(/^[#\\.]/) )", 
    "\t\t\t//\tselector = '#' +selector;", 
    "\t\t\tparent = parent ? this.$(parent).element() : document;", 
    "", 
    "\t\t\treturn $(selector, parent);", 
    "\t\t};", 
    "\t\t/** Exists", 
    "\t\t */", 
    "\t\tthis.exists = function(selector, parent=null)", 
    "\t\t{", 
    "\t\t\treturn typeof this.$(selector, parent).element()!=='undefined'; ", 
    "\t\t}; ", 
    "\t\t/** Create dom element or array of elements", 
    "\t\t * ", 
    "\t\t * @example ", 
    "\t\t *\t\t.create('checkbox', 'Checkbox 1')\t// single node, attribute is label", 
    "\t\t *\t\t.create('checkbox', {label: 'Checkbox 1'})\t// single node with attributes\t\t ", 
    "\t\t *\t\t.create('checkbox', ['Checkbox 1', 'Checkbox 2'])\t// multiple nodes", 
    "\t\t *\t\t.create('checkbox', [{label: 'Checkbox 1'}, {label: 'Checkbox 2'}])\t// multiple nodes with attributes", 
    "\t\t *", 
    "\t\t *\t\t.create('groupbox')\t// node without attributes", 
    "\t\t *\t\t.create('groupbox', {id: 'gp_id'})\t// node with attributes", 
    "\t\t *\t\t.create('groupbox', null, ['checkbox', ['Checkbox 1', 'Checkbox 2']] )\t// node with children", 
    "\t\t *\t\t.create('groupbox', {id: 'gp_id'}, ['checkbox', ['Checkbox 1', 'Checkbox 2']] )\t// node with attributes and children", 
    "\t\t *", 
    "\t\t * @param\tstring\ttype\tType of node to append", 
    "\t\t * @param\tnull|string|object|[object] \t[attributes]\tAttributes for controls, define array of strings or array of objects for adding multiple nodes ", 
    "\t\t * @param\t[type, attributes]\tchildren\tArray of attributes [type, attributes, create] for nested loop of create() function", 
    "\t\t * ", 
    "\t\t * @return element|[elements] created node or array of created nodes", 
    "\t\t */", 
    "\t\tthis.create = function(type, attributes=null, children=null)", 
    "\t\t{", 
    "\t\t\t//console.log('UI.create(\"'+type+'\")'); ", 
    "\t\t\t/** Sanitize attributes", 
    "\t\t\t */", 
    "\t\t\tattributes = (function()", 
    "\t\t\t{", 
    "\t\t\t\treturn ! attributes ? [{}] : ( ! Array.isArray(attributes) ? [attributes] : attributes );\t\t\t\t", 
    "\t\t\t})();", 
    "", 
    "\t\t\tvar created_nodes = attributes.map(function(node_attributes)", 
    "\t\t\t{", 
    "\t\t\t\t//console.log(  'created_nodes: ' + type +' '+node_attributes.id );", 
    "\t\t\t\treturn new ko.extensions.TemplateExtension.Komodo.Node()", 
    "\t\t\t\t\t\t\t\t\t\t\t .type(type)\t\t\t\t\t\t\t\t\t\t\t\t\t ", 
    "\t\t\t\t\t\t\t\t\t\t\t .attributes(node_attributes)", 
    "\t\t\t\t \t\t\t\t\t\t\t .get();", 
    "\t\t\t});", 
    " ", 
    "\t\t\t/** Last node", 
    "\t\t\t */", 
    "\t\t\tvar lastNode = created_nodes[created_nodes.length-1];", 
    "\t\t\t", 
    "\t\t\tif( children )", 
    "\t\t\t\tlastNode.appendChild ( this.create(children[0], children[1], children[2]) );", 
    "\t\t\t", 
    "\t\t\treturn created_nodes.length > 1 ? created_nodes : lastNode ;", 
    "\t\t};", 
    "\t\t/** Delete Node", 
    "\t\t */", 
    "\t\tthis.delete = function(selector_or_element, parent=null)", 
    "\t\t{", 
    "\t\t\tvar element\t= typeof selector_or_element === 'string' ? this.$(selector_or_element, parent) : selector_or_element;", 
    "\t\t\telement.parentNode.removeChild(element);", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** Get\\Set values of controls", 
    "\t\t * @param\tstring\tparam1", 
    "\t\t * @param\tmixed\tparam2\tif not false, then take only nodes without attribute prefs=\"false\"", 
    "\t\t * @return\t{id: value}\tObject of node ids and values", 
    "\t\t *", 
    "\t\t * @example values()\t// GET all values from docuent", 
    "\t\t * @example values('id')\t// GET all values from element", 
    "\t\t * @example values('only-prefs')\t// GET prefs values from docuent", 
    "\t\t * @example values('id', 'only-prefs')\t// GET prefs values from element", 
    "\t\t * ", 
    "\t\t * @example values({'id': 'value to set'})\t// mass SET values by object", 
    "\t\t * ", 
    "\t\t */", 
    "\t\tthis.values = function(param1, param2=false)", 
    "\t\t{", 
    "\t\t\tconsole.log(  'UI.values()' );", 
    "", 
    "\t\t\treturn typeof param1 === 'object' ? setValues(param1) : getValues(param1, param2) ;", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** Get\\Set element value", 
    "\t\t *", 
    "\t\t * @param\tstring\tparam1\tSelector of element to get\\set value", 
    "\t\t * @param\tstring\tparam2\tValue of element to set", 
    "\t\t * @return mixed          Current value of element ", 
    "\t\t *", 
    "\t\t * @example value('#selector')\t// get value of element", 
    "\t\t * @example value('#selector', 'value')\t// set value to element", 
    "\t\t */", 
    "\t\tthis.value = function(param1=null, param2=null)", 
    "\t\t{", 
    "\t\t\tvar element\t= typeof param1 === 'string' ? this.$(param1).element() : param1;", 
    "\t\t\t", 
    "\t\t\treturn param2 ? setValue(element, param2) : getValue(element);", 
    "\t\t};", 
    "", 
    "\t\t/** Append new children to node", 
    "\t\t *", 
    "\t\t * @param\tnode|string \tparent\tNode element or selector of parent to append children", 
    "\t\t * @param\telement|array\telements\tElement to append", 
    "\t\t * ", 
    "\t\t * @return\tself ", 
    "\t\t */", 
    "\t\tthis.append = function( parent_selector, elements )", 
    "\t\t{", 
    "\t\t\t//console.log( 'UI.append()' );", 
    "\t\t\t//console.log( elements );", 
    "\t\t\tparent = this.$(parent_selector);", 
    "\t\t\t", 
    "\t\t\t/** Parent id exists", 
    "\t\t\t *  it should EXISTS", 
    "\t\t\t */", 
    "\t\t\tvar parentIdExists = function()", 
    "\t\t\t{", 
    "\t\t\t\tif( self.exists(parent_selector) )", 
    "\t\t\t\t\treturn true;", 
    "\t\t\t\t", 
    "\t\t\t\talert( 'UI.append()\\n\\nPARENT ELEMENT DOES NOT EXISTS: '+parent_selector );", 
    "\t\t\t\treturn false;", 
    "\t\t\t}; ", 
    "\t\t\t", 
    "\t\t\t///** Id not exists", 
    "\t\t\t// *  it should NOT EXISTS", 
    "\t\t\t// */", 
    "\t\t\t//var childIdExists = function(id)", 
    "\t\t\t//{", 
    "\t\t\t//\tconsole.log('childIdExists: '+id); ", 
    "\t\t\t//\t//if( ! id || ! self.exists('#'+id, parent) )", 
    "\t\t\t//\tif( ! self.exists('#'+id) )\t\t\t", 
    "\t\t\t//\t\treturn false;", 
    "\t\t\t//\t", 
    "\t\t\t//\t//alert( 'UI.append()\\n\\nCHILD ID ALREADY EXISTS: #'+id );", 
    "\t\t\t//\talert( 'UI.append()\\n\\nChild in parent alerady exists\\n\\nPARENT: '+parent_selector+'\\nCHILD:    #'+id );\t\t\t\t", 
    "\t\t\t//\treturn true;", 
    "\t\t\t//};", 
    "\t\t\t", 
    "\t\t\tif( ! parentIdExists() )", 
    "\t\t\t\treturn;", 
    "\t\t\t ", 
    "\t\t\tif( ! Array.isArray(elements) )", 
    "\t\t\t\telements = [elements];\t", 
    "\t\t\t", 
    "\t\t\tfor(let e=0; e<elements.length;e++)", 
    "\t\t\t\tparent.element().appendChild( elements[e] );\t\t\t\t", 
    "\t\t\t", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** Remove child element", 
    "\t\t * @param\tstring\tselector\tSelector of node", 
    "\t\t * @return\tself", 
    "\t\t */", 
    "\t\tthis.empty = function(selector, parent=null)", 
    "\t\t{", 
    "\t\t\tthis.$(selector, parent).empty();", 
    "\t\t\t", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "\t\t/*---------------------------------------", 
    "\t\t\tPREFSET DOM", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** Get Controlset class", 
    "\t\t * @return\tobject [ControlSet](Controls/ControlSet)", 
    "\t\t */", 
    "\t\tthis.controlset = function()", 
    "\t\t{", 
    "\t\t\treturn  new ko.extensions.TemplateExtension.Komodo.Controls.ControlSet().document(document);", 
    "\t\t};", 
    "", 
    "\t\t/** Get Dropdown class", 
    "\t\t * @param\tstring\tselector\tSelector of dropdown menu", 
    "\t\t * @return\tobject [Dropdown](Controls/Dropdown)", 
    "\t\t */", 
    "\t\tthis.dropdown = function(selector=null)", 
    "\t\t{", 
    "\t\t\tvar dropdown =  new ko.extensions.TemplateExtension.Komodo.Controls.Dropdown().document(document);", 
    "\t\t", 
    "\t\t\tif( selector )", 
    "\t\t\t\tdropdown.element( this.$(selector) );", 
    "\t\t\t", 
    "\t\t\treturn dropdown;", 
    "\t\t}; ", 
    "\t\t", 
    "\t\t/*---------------------------------------", 
    "\t\t\tPRIVATE VALUE METHODS", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** Get values from controls", 
    "\t\t *", 
    "\t\t * @param\tstring\tselector\tSelector of node or parent nodes whereto get values", 
    "\t\t * @param\tmixed\tonly_prefs\tIf not false then only elements withthout attribute prefs=\"false\" will be processed", 
    "\t\t * @return\t{id: value}\t            Object with elements ids and current values", 
    "\t\t */", 
    "\t\tvar getValues = function(selector, only_prefs=false)", 
    "\t\t{", 
    "\t\t\tvar values\t= {};", 
    "\t\t\t//console.log(  'getValues()' );", 
    "", 
    "\t\t\t/** Test if getting only preferences,", 
    "\t\t\t* \t\tif so, then if control has not ", 
    "\t\t\t*/", 
    "\t\t\tvar preferenceTest = function(element)", 
    "\t\t\t{", 
    "\t\t\t\t//return only_prefs===false || (element.hasAttribute('prefs') && element.getAttribute('prefs')!=='false');", 
    "\t\t\t\treturn only_prefs===false || element.getAttribute('prefs')!=='false';", 
    "\t\t\t}; ", 
    "\t\t\t/** Set to value to values object", 
    "\t\t\t */", 
    "\t\t\tvar setToValues = function(id, value)", 
    "\t\t\t{", 
    "\t\t\t\t//console.log(  'setToValues(): ' + id +', '+ value );", 
    "\t\t\t\tif( value!==null )", 
    "\t\t\t\t\tvalues[id] = value;", 
    "\t\t\t};", 
    "\t\t\t ", 
    "\t\t\t/** Get prefset values", 
    "\t\t\t */", 
    "\t\t\tvar setControlsetValues = function(container)", 
    "\t\t\t{", 
    "\t\t\t\t//console.log('setControlsetValues()');", 
    "\t\t\t\tvar container_values\t= {};", 
    "\t\t\t\t", 
    "\t\t\t\t$(container).find( control_types.join(',') ).each(function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar value = preferenceTest(this) ? self.value( this ) : null;", 
    "\t\t\t\t\t\t", 
    "\t\t\t\t\tif( value && this.id )", 
    "\t\t\t\t\t\tcontainer_values[this.id] = value;", 
    "\t\t\t\t});", 
    "\t\t\t\t", 
    "\t\t\t\tvar controlset\t= $(container).parent();", 
    "\t\t\t\tvar controlset_id\t= controlset.attr('id');", 
    "", 
    "\t\t\t\tif( typeof values[controlset_id] === 'undefined'  )", 
    "\t\t\t\t\tvalues[controlset_id] = {};", 
    "\t\t\t\t", 
    "\t\t\t\tvalues[controlset_id][$(container).attr('label')] = container_values;", 
    "\t\t\t};", 
    "\t\t\t", 
    "\t\t\t/** Get values form child nodes", 
    "\t\t\t * @param\tarray\tchild_nodes\tElement list of child nodes", 
    "\t\t\t */", 
    "\t\t\tvar loopNestedElements = function(child_nodes)", 
    "\t\t\t{", 
    "\t\t\t\t//console.log('loopNestedElements');", 
    "\t\t\t\t//console.log( child_nodes );", 
    "\t\t\t\tchild_nodes.each(function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar id\t= this.getAttribute('id');", 
    "\t\t\t\t\t//console.log( '-----child_node: '+id );", 
    "\t\t\t\t\t//console.log( this );", 
    "\t\t\t\t\t//console.log( ! Object.keys(this.childNodes).length );", 
    "\t\t\t\t\t", 
    "\t\t\t\t\tif( ! Object.keys(this.childNodes).length ){", 
    "\t\t\t\t\t\tif( preferenceTest(this) )", 
    "\t\t\t\t\t\t\tsetToValues( id, self.value(this) );", 
    "\t\t\t\t\t\t\t\t", 
    "\t\t\t\t\t}else if( this.classList.contains('controlset-container') )", 
    "\t\t\t\t\t\t//console.log(  'PREF SET: ' + id );", 
    "\t\t\t\t\t\tsetControlsetValues( this );", 
    "\t\t\t\t\t\t//setToValues( id, getControlsetValues(id) );", 
    "\t\t\t\t\t", 
    "\t\t\t\t\telse", 
    "\t\t\t\t\t\tloopNestedElements( $(this.childNodes) );", 
    "\t\t\t\t});", 
    "\t\t\t}; ", 
    "", 
    "\t\t\tloopNestedElements( self.$(selector).children() );", 
    "", 
    "\t\t\treturn values;", 
    "\t\t};", 
    "", 
    "\t\t/** Set values to elements", 
    "\t\t * @param\t{id: value}\tvalues_data\tObject with ids and valuest to set", 
    "\t\t */", 
    "\t\tvar setValues = function(values_data)", 
    "\t\t{", 
    "\t\t\tfor(var id in values_data)", 
    "\t\t\t\tif (values_data.hasOwnProperty(id))", 
    "\t\t\t\t\tsetValue( '#' + id,  values_data[id] );", 
    "\t\t};", 
    "", 
    "\t\t/** Get element value", 
    "\t\t * @param\tobject\telement\tElement node for get value", 
    "\t\t */", 
    "\t\tvar getValue = function(element)", 
    "\t\t{", 
    "\t\t\t/** I element type node", 
    "\t\t\t*/", 
    "\t\t\tvar is_control_node = control_types.indexOf( element.nodeName ) > -1;", 
    "\t\t\t", 
    "\t\t\tif( ! is_control_node || ! element.id )", 
    "\t\t\t\treturn null;", 
    "\t\t\t//console.log(  'getValue()' );", 
    "\t\t\t//console.log( element );", 
    "\t\t\t", 
    "\t\t\treturn element.nodeName == 'checkbox' ? element.checked : element.value;", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** Set element value", 
    "\t\t * @param\tstring\tselector\tSelector of element for set value", 
    "\t\t * @param\tmixed\tvalue\tValue of element", 
    "\t\t */", 
    "\t\tvar setValue = function(selector, value)", 
    "\t\t{", 
    "\t\t\t//console.log(  'setValue()' );", 
    "\t\t\t//console.log( selector );", 
    "\t\t\t//console.log( value );", 
    "\t\t\t", 
    "\t\t\tvar element\t= self.$(selector).element();", 
    "\t\t\t", 
    "\t\t\tif( element.nodeName === 'checkbox' )", 
    "\t\t\t\t element.checked = value;", 
    "\t\t\t", 
    "\t\t\telse", 
    "\t\t\t\telement.value = value;", 
    "\t\t}; ", 
    "\t", 
    "\t\t/** Get sanitized id", 
    "\t\t */", 
    "\t\tvar sanitizeId = function(id)", 
    "\t\t{", 
    "\t\t\treturn id.replace(/[^a-z0-9\\s-_]/gi, '').replace(/\\s+/gi, '_').trim().toLowerCase();", 
    "\t\t};", 
    "\t\t/** test", 
    "\t\t */", 
    "\t\tthis.test = function()", 
    "\t\t{", 
    "\t\t\talert( 'UI.test()' );", 
    "\t\t}; ", 
    "\t}", 
    "\treturn UI;", 
    "", 
    "})();"
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "async": false, 
  "type": "macro", 
  "trigger": "trigger_postopen"
}