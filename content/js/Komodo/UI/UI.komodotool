{
  "keyboard_shortcut": "", 
  "name": "UI", 
  "language": "JavaScript", 
  "trigger_enabled": false, 
  "value": [
    "/** UI", 
    "* Manage extension`s ui elements", 
    "*", 
    "*/", 
    "ko.extensions.TemplateExtension.Komodo.UI = (function()", 
    "{", 
    "\tfunction UI()", 
    "\t{", 
    "\t\tvar self\t= this;", 
    "\t\tvar $\t= require('ko/dom');", 
    "\t\tvar document\t= document;\t\t", 
    "", 
    "\t\t/*---------------------------------------", 
    "\t\t\tSETUP", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** Set document where UI is operating, pane or preferences window", 
    "\t\t *", 
    "\t\t * @param\tstring\t_document", 
    "\t\t * @return\tself ", 
    "\t\t */", 
    "\t\tthis.document = function(_document)", 
    "\t\t{", 
    "\t\t\tdocument = _document;", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "", 
    "\t\t/** Query selector in document", 
    "\t\t * ", 
    "\t\t * @param\tstring\tselector\tSelector of node", 
    "\t\t * @param\tstring\tselector\tSelector of parent, if null, then current document is used", 
    "\t\t * ", 
    "\t\t * @return\ttype\t[QueryObject](https://docs.activestate.com/komodo/11/sdk/api/module-ko_dom-QueryObject.html)", 
    "\t\t */", 
    "\t\tthis.$ = function(selector, parent=null)", 
    "\t\t{", 
    "\t\t\t//if( ! selector.match(/^[#\\.]/) )", 
    "\t\t\t//\tselector = '#' +selector;", 
    "\t\t\tparent = parent ? this.$(parent).element() : document;", 
    "", 
    "\t\t\treturn $(selector, parent);", 
    "\t\t};", 
    "\t\t/** Exists", 
    "\t\t */", 
    "\t\tthis.exists = function(selector, parent=null)", 
    "\t\t{", 
    "\t\t\treturn typeof this.$(selector, parent).element()!=='undefined'; ", 
    "\t\t}; ", 
    "\t\t/** Create dom element or array of elements", 
    "\t\t * ", 
    "\t\t * @example ", 
    "\t\t *\t\t.create('checkbox', 'Checkbox 1')\t// single node, attribute is label", 
    "\t\t *\t\t.create('checkbox', {label: 'Checkbox 1'})\t// single node with attributes\t\t ", 
    "\t\t *\t\t.create('checkbox', ['Checkbox 1', 'Checkbox 2'])\t// multiple nodes", 
    "\t\t *\t\t.create('checkbox', [{label: 'Checkbox 1'}, {label: 'Checkbox 2'}])\t// multiple nodes with attributes", 
    "\t\t *", 
    "\t\t *\t\t.create('groupbox')\t// node without attributes", 
    "\t\t *\t\t.create('groupbox', {id: 'gp_id'})\t// node with attributes", 
    "\t\t *\t\t.create('groupbox', null, ['checkbox', ['Checkbox 1', 'Checkbox 2']] )\t// node with children", 
    "\t\t *\t\t.create('groupbox', {id: 'gp_id'}, ['checkbox', ['Checkbox 1', 'Checkbox 2']] )\t// node with attributes and children", 
    "\t\t *", 
    "\t\t * @param\tstring\ttype\tType of node to append", 
    "\t\t * @param\tnull|string|object|[object] \t[attributes]\tAttributes for controls, define array of strings or array of objects for adding multiple nodes ", 
    "\t\t * @param\t[type, attributes]\tchildren\tArray of attributes [type, attributes, create] for nested loop of create() function", 
    "\t\t * ", 
    "\t\t * @return element|[elements] created node or array of created nodes", 
    "\t\t */", 
    "\t\tthis.create = function(type, attributes=null, children=null)", 
    "\t\t{", 
    "\t\t\t//console.log('---------------'); ", 
    "\t\t\t/** Sanitize attributes", 
    "\t\t\t */", 
    "\t\t\tattributes = (function()", 
    "\t\t\t{", 
    "\t\t\t\treturn ! attributes ? [{}] : ( ! Array.isArray(attributes) ? [attributes] : attributes );\t\t\t\t", 
    "\t\t\t})();", 
    "", 
    "\t\t\tvar created_nodes = attributes.map(function(node_attributes)", 
    "\t\t\t{", 
    "\t\t\t\t//console.log(  'created_nodes: ' + type +' '+node_attributes.id );", 
    "\t\t\t\treturn new ko.extensions.TemplateExtension.Komodo.Node()", 
    "\t\t\t\t\t\t\t\t\t\t\t .type(type)\t\t\t\t\t\t\t\t\t\t\t\t\t ", 
    "\t\t\t\t\t\t\t\t\t\t\t .attributes(node_attributes)", 
    "\t\t\t\t \t\t\t\t\t\t\t .get();", 
    "\t\t\t});", 
    " ", 
    "\t\t\t/** Last node", 
    "\t\t\t */", 
    "\t\t\tvar lastNode = created_nodes[created_nodes.length-1];", 
    "\t\t\t", 
    "\t\t\tif( children )", 
    "\t\t\t\tlastNode.appendChild ( this.create(children[0], children[1], children[2]) );", 
    "\t\t\t", 
    "\t\t\treturn created_nodes.length > 1 ? created_nodes : lastNode ;", 
    "\t\t};", 
    "\t\t/** Delete Node", 
    "\t\t */", 
    "\t\tthis.delete = function(selector_or_element, parent=null)", 
    "\t\t{", 
    "\t\t\tvar element\t= typeof selector_or_element === 'string' ? this.$(selector_or_element, parent) : selector_or_element;", 
    "\t\t\telement.parentNode.removeChild(element);", 
    "\t\t}; ", 
    "\t\t/** Get element value", 
    "\t\t */", 
    "\t\tthis.value = function(selector_or_element)", 
    "\t\t{", 
    "\t\t\tconsole.log('UI.value: '+selector_or_element);", 
    "\t\t\tvar element\t= typeof selector_or_element === 'string' ? this.$(selector_or_element) : selector_or_element;", 
    "\t\t\t", 
    "\t\t\t/** Test if getting only preferences,", 
    "\t\t\t* \t\tif so, then if control has not attribute prefs=\"false\"", 
    "\t\t\t*/", 
    "\t\t\tvar preference_test = only_prefs===false || element.getAttribute('prefs')!=='false';", 
    "\t\t\t", 
    "\t\t\t/** I control type node", 
    "\t\t\t*/", 
    "\t\t\tvar is_control_node = ['checkbox','textbox','radio'].indexOf( element.nodeName ) > -1;", 
    "\t\t\t", 
    "\t\t\t//if( element.id && is_control_node && preference_test )", 
    "\t\t\tif( element.id && is_control_node )", 
    "\t\t\t\treturn element.nodeName == 'checkbox' ? element.checked : element.value;", 
    "\t\t\t", 
    "\t\t\treturn null;", 
    "\t\t}; ", 
    "\t\t/** Get values of parent node controls", 
    "\t\t * @param\tstring\tparam1", 
    "\t\t * @param\tmixed\tparam2\tif not false, then take only nodes without attribute prefs=\"false\"", 
    "\t\t * @return\t{id: value}\tObject of node ids and values", 
    "\t\t *", 
    "\t\t * @example values()\t// get all values from docuent", 
    "\t\t * @example values('#element')\t// get all values from element", 
    "\t\t * @example values('only-prefs')\t// get prefs values from docuent", 
    "\t\t * @example values('#element', 'only-prefs')\t// get prefs values from element", 
    "\t\t * ", 
    "\t\t * @example values('#control', 'value to set')\t// set value to control", 
    "\t\t * @example values({'#control': 'value to set'})\t// mass set values by object", 
    "\t\t * ", 
    "\t\t */", 
    "\t\tthis.values = function(param1, param2=false)", 
    "\t\t{", 
    "\t\t\t//console.log(  'UI.values(): ' + param1 );", 
    "\t\t\tconsole.log( document.childNodes );", 
    "", 
    "\t\t\treturn getValues(param1, param2);", 
    "\t\t};", 
    "", 
    "\t\t/** Append new children to node", 
    "\t\t *", 
    "\t\t * @param\tnode|string \tparent\tNode element or selector of parent to append children", 
    "\t\t * @param\telement|array\telements\tElement to append", 
    "\t\t * ", 
    "\t\t * @return\tself ", 
    "\t\t */", 
    "\t\tthis.append = function( parent_selector, elements )", 
    "\t\t{", 
    "\t\t\t//console.log( 'UI.append()' );", 
    "\t\t\t//console.log( elements );", 
    "\t\t\tparent = this.$(parent_selector);", 
    "\t\t\t", 
    "\t\t\t/** Parent id exists", 
    "\t\t\t *  it should EXISTS", 
    "\t\t\t */", 
    "\t\t\tvar parentIdExists = function()", 
    "\t\t\t{", 
    "\t\t\t\tif( self.exists(parent_selector) )", 
    "\t\t\t\t\treturn true;", 
    "\t\t\t\t", 
    "\t\t\t\talert( 'UI.append()\\n\\nPARENT ELEMENT DOES NOT EXISTS: '+parent_selector );", 
    "\t\t\t\treturn false;", 
    "\t\t\t}; ", 
    "\t\t\t", 
    "\t\t\t///** Id not exists", 
    "\t\t\t// *  it should NOT EXISTS", 
    "\t\t\t// */", 
    "\t\t\t//var childIdExists = function(id)", 
    "\t\t\t//{", 
    "\t\t\t//\tconsole.log('childIdExists: '+id); ", 
    "\t\t\t//\t//if( ! id || ! self.exists('#'+id, parent) )", 
    "\t\t\t//\tif( ! self.exists('#'+id) )\t\t\t", 
    "\t\t\t//\t\treturn false;", 
    "\t\t\t//\t", 
    "\t\t\t//\t//alert( 'UI.append()\\n\\nCHILD ID ALREADY EXISTS: #'+id );", 
    "\t\t\t//\talert( 'UI.append()\\n\\nChild in parent alerady exists\\n\\nPARENT: '+parent_selector+'\\nCHILD:    #'+id );\t\t\t\t", 
    "\t\t\t//\treturn true;", 
    "\t\t\t//};", 
    "\t\t\t", 
    "\t\t\tif( ! parentIdExists() )", 
    "\t\t\t\treturn;", 
    "\t\t\t ", 
    "\t\t\tif( ! Array.isArray(elements) )", 
    "\t\t\t\telements = [elements];\t", 
    "\t\t\t", 
    "\t\t\tfor(let e=0; e<elements.length;e++)", 
    "\t\t\t\tparent.element().appendChild( elements[e] );\t\t\t\t", 
    "\t\t\t", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** Remove child element", 
    "\t\t * @param\tstring\tselector\tSelector of node", 
    "\t\t * @return\tself", 
    "\t\t */", 
    "\t\tthis.empty = function(selector, parent=null)", 
    "\t\t{", 
    "\t\t\tthis.$(selector, parent).empty();", 
    "\t\t\t", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "\t\t/*---------------------------------------", 
    "\t\t\tPREFSET DOM", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** Create prefset dom with menu and toggable containers with controls.", 
    "\t\t * If exist, then prefset will be refreshed", 
    "\t\t *", 
    "\t\t * @param\tstring\tprefset_selector\tId of dom wrapper where menu abd all containers are inserted", 
    "\t\t * @param\tobject\tperfset_template\tRepresentation of container xul structure", 
    "\t\t * @param\tobject\tperfset_values\tData for pref set`s controls", 
    "\t\t *", 
    "\t\t * @example", 
    "\t\t *\t\tperfset_template = {", 
    "\t\t *\t\t\tpref_set_test:{ 'Prefset Caption': ['checkbox', 'checkbox'] }", 
    "\t\t * \t\t}", 
    "\t\t * ", 
    "\t\t * \t\tperfset_values = {", 
    "\t\t *\t\t\t'conteiner-A':{", 
    "\t\t * \t\t\t\t'Control 1': true,", 
    "\t\t * \t\t\t\t'Control 2': false,", 
    "\t\t * \t\t\t}", 
    "\t\t * \t\t}", 
    "\t\t * ", 
    "\t\t */", 
    "\t\tthis.createPrefSet = function(prefset_selector, perfset_template, perfset_values)", 
    "\t\t{", 
    "\t\t\tvar prefset_caption\t= Object.keys(perfset_template).pop();\t\t\t\t\t\t", 
    "\t\t\tvar control_types\t= perfset_template[prefset_caption];", 
    "\t\t\tvar containers_ids\t= Object.keys(perfset_values);\t\t", 
    "\t\t\tvar container_class_shown\t= prefset_selector+'-shown'; ", 
    "", 
    "\t\t\t/** Add prefset attribute prefsaet=\"true\"", 
    "\t\t\t * For identification for get\\set values", 
    "\t\t\t */", 
    "\t\t\tvar addPrefsetAttribute = (function()", 
    "\t\t\t{", 
    "\t\t\t\tself.$( prefset_selector ).element().setAttribute('prefset', true);", 
    "\t\t\t})();", 
    "\t\t\t/** Add caption", 
    "\t\t\t */", 
    " \t\t\tvar addCaption = (function()", 
    "\t\t\t{", 
    "\t\t\t\tself.$( prefset_selector +' > caption').delete(); // delete menu if exists", 
    "\t\t\t\t", 
    "\t\t\t\tself.append( prefset_selector, self.create('caption', prefset_caption ) );", 
    "\t\t\t})();", 
    "\t\t\t", 
    "\t\t\t/** Ad Menu", 
    "\t\t\t */", 
    " \t\t\tvar addMenu = (function()", 
    "\t\t\t{", 
    "\t\t\t\tself.$( prefset_selector +' menulist').delete(); // delete menu if exists", 
    "\t\t\t\t", 
    "\t\t\t\tself.append( prefset_selector, self.create('menulist', null, ['menupopup']) );", 
    "\t\t\t})();", 
    "", 
    "\t\t\t/** Create perfset_template", 
    "\t\t\t *", 
    "\t\t\t * @param\tobject\tcontrols_data\tContainer-id: {control id-label: value}", 
    "\t\t\t */", 
    "\t\t\tvar createContainer = function(container_index, container_label, controls_data)", 
    "\t\t\t{", 
    "\t\t\t\tvar controls_labels\t= Object.keys(controls_data);", 
    "\t\t\t\t/** container", 
    "\t\t\t\t */", 
    "\t\t\t\tvar container = (function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar display\t= container_index===0 ? 'block'\t: 'none';", 
    "\t\t\t\t\tvar container\t= self.create( 'groupbox', {", 
    "\t\t\t\t\t\t\t\t\t\t\t'label': container_label,\t// sanitized label become id attribute, label is for save and restore element from prefs", 
    "\t\t\t\t\t\t\t\t\t\t\t'class': 'prefset-container',\t// class 'prefset-container' is for identification of container in prefset DOM", 
    "\t\t\t\t\t\t\t\t\t\t\t//'style': 'display:' + display", 
    "\t\t\t\t\t\t\t\t\t });", 
    "\t\t\t\t\t", 
    "\t\t\t\t\tself.$( '#'+container.getAttribute('id') ).delete(); // delete container if exists", 
    "\t\t\t\t\t", 
    "\t\t\t\t\tself.append( prefset_selector, container);", 
    "\t\t\t\t\t\t", 
    "\t\t\t\t\treturn container;", 
    "\t\t\t\t})(); ", 
    "\t\t\t\t", 
    "\t\t\t\t/** addMenuItem", 
    "\t\t\t\t */", 
    "\t\t\t\tvar addMenuItem = (function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar toggle_containers =", 
    "\t\t\t\t\t[", 
    "\t\t\t\t\t\t\"var container_class_shown='\"+container_class_shown+\"'\",", 
    "\t\t\t\t\t\t\"var element_hide=document.getElementsByClassName(container_class_shown)[0]\",", 
    "\t\t\t\t\t\t\"var element_show=document.getElementById('\"+container.getAttribute('id')+\"')\",", 
    "\t\t\t\t\t\t", 
    "\t\t\t\t\t\t\"if(element_hide==element_show)return\", // return if clicked same element", 
    "\t\t\t\t\t\t", 
    "\t\t\t\t\t\t\"element_show.classList.add(container_class_shown)\", // show new container", 
    "\t\t\t\t\t\t\"element_show.style.display = 'block'\",", 
    "\t\t\t\t", 
    "\t\t\t\t\t\t\"element_hide.classList.remove(container_class_shown)\", // hide old element", 
    "\t\t\t\t\t\t\"element_hide.style.display = 'none'\",", 
    "\t\t\t\t\t];", 
    "\t\t\t\t\t", 
    "\t\t\t\t\tvar menu_item\t= self.create('menuitem', { 'id': container_label+'item', 'label': container_label, 'oncommand': toggle_containers.join(';')} );", 
    "\t\t\t\t", 
    "\t\t\t\t\tself.append( prefset_selector + ' menupopup', menu_item );", 
    "\t\t\t\t})(); ", 
    "\t\t\t\t  ", 
    "\t\t\t\t/** Append control to container", 
    "\t\t\t\t */", 
    "\t\t\t\tvar appendControlToContainer = function(index)", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar control_type\t= control_types[index];", 
    "\t\t\t\t\tvar control_data\t= {'label': controls_labels[index], 'value':controls_data[controls_labels[index]] };", 
    "\t\t\t\t\tvar control\t= self.create(control_type, control_data);", 
    "\t\t\t\t\t//console.log('control');", 
    "\t\t\t\t\t//console.log( control );", 
    "\t\t\t\t\t/** Add label if not checkbox ", 
    "\t\t\t\t\t */", 
    "\t\t\t\t\tvar label = (function()", 
    "\t\t\t\t\t{", 
    "\t\t\t\t\t\tif( control_type==='checkbox' )", 
    "\t\t\t\t\t\t\treturn;", 
    "\t\t\t\t\t\t", 
    "\t\t\t\t\t\tvar hbox_label = self.create( 'hbox', null,[ 'label', {'value': controls_labels[index], 'control': control.getAttribute('id')} ] );", 
    "\t\t\t\t\t\t\t\t\t ", 
    "\t\t\t\t\t\tself.append( '#'+container.getAttribute('id'), hbox_label );", 
    "\t\t\t\t\t\t", 
    "\t\t\t\t\t\treturn hbox_label;", 
    "\t\t\t\t\t})(); ", 
    "\t\t\t\t\t", 
    "\t\t\t\t\tvar parent\t= label ? label : self.$('#'+container.getAttribute('id'));", 
    "\t\t\t\t\t", 
    "\t\t\t\t\tself.$(parent).append( control );", 
    "\t\t\t\t\t", 
    "\t\t\t\t\tself.append( '#'+container.getAttribute('id'), control );\t\t\t\t\t", 
    "\t\t\t\t}; ", 
    "\t\t\t\t", 
    "\t\t\t\tfor(let c=0; c<controls_labels.length;c++)", 
    "\t\t\t\t\tappendControlToContainer(c);", 
    "\t\t\t};", 
    "\t\t\t", 
    "\t\t\tfor(let i=0; i<containers_ids.length;i++)", 
    "\t\t\t\tcreateContainer(i, containers_ids[i], perfset_values[containers_ids[i]] );", 
    "\t\t\t", 
    "\t\t\t/* SELECT MENU ITEM */", 
    "\t\t\t/** Select container", 
    "\t\t\t */", 
    "\t\t\tvar selectContainer = (function()", 
    "\t\t\t{", 
    "\t\t\t\tself.$( prefset_selector + ' menulist' ).element().selectedIndex = 1;", 
    "\t\t\t\t/* Hide containers  */", 
    "\t\t\t\tself.$(prefset_selector +' .prefset-container').each(function(index)", 
    "\t\t\t\t{", 
    "\t\t\t\t\tif( index>0 )", 
    "\t\t\t\t\t\tthis.setAttribute('style', this.getAttribute('id') +';display:none;');", 
    "\t\t\t\t\telse", 
    "\t\t\t\t\t\tthis.classList.add( container_class_shown );", 
    "\t\t\t\t});", 
    "\t\t\t})(); ", 
    "\t\t\t", 
    "\t\t\tconsole.log( self.$( prefset_selector ).element().outerHTML ); // DEBUG: get element as plain text", 
    "\t\t};", 
    "\t\t/** Create dropdown element", 
    "\t\t * @param\tstring\tid\tId of dropdown element", 
    "\t\t * @param\tobject\titems\tItems for dropdown ", 
    "\t\t * @param\tstring\t[menu_text]\tText in dropdown menu button, if null then current item is shown", 
    "\t\t *", 
    "\t\t * @return\t[element](https://developer.mozilla.org/en-US/docs/Web/API/Element)", 
    "\t\t *", 
    "\t\t * @example dropdown('#dropdown_test',\t{'Item A':'alert(\"A\")','Item B':'alert(\"B\")'})", 
    "\t\t * @example dropdown('#dropdown_text_test',\t{'Item A':{tooltip: 'Item A'},'Item B':{style: 'border:green;'}}, 'Attributes & label')", 
    "\t\t *", 
    "\t\t */", 
    "\t\tthis.dropdown = function(id, items, menu_text=null)", 
    "\t\t{", 
    "\t\t\tvar menulist\t= menu_text ? self.create('button', {label: menu_text, type: \"menu\", id: sanitizeId(id) }) : self.create('menulist', {id: sanitizeId(id)});", 
    "\t\t\tvar menupopup\t= self.create('menupopup');", 
    "", 
    "\t\t\t/** Get item simple", 
    "\t\t\t */", 
    "\t\t\tvar getItemSimple = function(label, _attributes)", 
    "\t\t\t{", 
    "\t\t\t\tvar attributes = {label: label};", 
    "\t\t\t\t", 
    "\t\t\t\tif( typeof _attributes === 'object' ){", 
    "\t\t\t\t\tfor(var attr in _attributes)", 
    "\t\t\t\t\t\tif (_attributes.hasOwnProperty(attr))", 
    "\t\t\t\t\t\t\tattributes[attr] = _attributes[attr];", 
    "\t\t\t\t\t\t\t//var value = _attributes[attr];", 
    "\t\t\t\t}else", 
    "\t\t\t\t\tattributes.oncommand = _attributes;", 
    "\t\t\t\t", 
    "\t\t\t\treturn self.create('menuitem', attributes );", 
    "\t\t\t}; ", 
    "\t\t\t", 
    "\t\t\tfor(var label in items)", 
    "\t\t\t\tif (items.hasOwnProperty(label))", 
    "\t\t\t\t\tmenupopup.appendChild( getItemSimple(label, items[label]) );", 
    "\t\t\t\t\t", 
    "\t\t\tmenulist.appendChild( menupopup );", 
    "\t\t\t", 
    "\t\t\t//console.log( menulist.outerHTML ); // DEBUG: get element as plain text", 
    "", 
    "\t\t\treturn  menulist;", 
    "\t\t}; ", 
    "\t\t", 
    "\t\t/*---------------------------------------", 
    "\t\t\tPRIVATE", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** Get values from controls", 
    "\t\t */", 
    "\t\tvar getValues = function(selector, only_prefs=false)", 
    "\t\t{", 
    "\t\t\tconsole.log(  'getValues(): ' + selector );", 
    "\t\t\tvar values\t= {};", 
    "", 
    "\t\t\t/** Set to value to values object", 
    "\t\t\t */", 
    "\t\t\tvar setToValues = function(id, value)", 
    "\t\t\t{", 
    "\t\t\t\tif( value!==null )", 
    "\t\t\t\t\tvalues[id] = value;", 
    "\t\t\t};", 
    "\t\t\t ", 
    "\t\t\t/** Get prefset values", 
    "\t\t\t */", 
    "\t\t\tvar getPrefsetValues = function(prefset_id)", 
    "\t\t\t{", 
    "\t\t\t\tvar prefset_values\t= {};", 
    "", 
    "\t\t\t\t/** Loop containers", 
    "\t\t\t\t */", 
    "\t\t\t\tvar loopContainers = function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\t/** Get elements values", 
    "\t\t\t\t\t */", 
    "\t\t\t\t\tvar getElementsValues = function(container)", 
    "\t\t\t\t\t{", 
    "\t\t\t\t\t\tvar prefset_values\t= {};", 
    "", 
    "\t\t\t\t\t\t$(container).children().each(function()", 
    "\t\t\t\t\t\t{", 
    "\t\t\t\t\t\t\tvar value = this.value( self );", 
    "\t\t\t\t\t\t\tif( value!==null )", 
    "\t\t\t\t\t\t\t\tprefset_values[self.id] = value;", 
    "\t\t\t\t\t\t});", 
    "\t\t\t\t\t\treturn prefset_values;", 
    "\t\t\t\t\t}; ", 
    "\t\t\t\t\t", 
    "\t\t\t\t\tself.$('#'+prefset_id +' .prefset-container').each(function()", 
    "\t\t\t\t\t{\t", 
    "\t\t\t\t\t\tprefset_values[self.getAttribute('label')] = getElementsValues(self);", 
    "\t\t\t\t\t});", 
    "\t\t\t\t}; ", 
    "\t\t\t\tloopContainers();", 
    "", 
    "\t\t\t\treturn prefset_values;", 
    "\t\t\t};", 
    "\t\t\t", 
    "\t\t\t/** Get values form child nodes", 
    "\t\t\t * @param\tarray\tchild_nodes\tElement list of child nodes", 
    "\t\t\t */", 
    "\t\t\tvar loopNestedElements = function(child_nodes)", 
    "\t\t\t{", 
    "\t\t\t\tconsole.log('loopNestedElements');", 
    "\t\t\t\tconsole.log( child_nodes );", 
    "\t\t\t\tchild_nodes.each(function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar id\t= this.getAttribute('id');", 
    "\t\t\t\t\tconsole.log( 'child_node: '+id );", 
    "\t\t\t\t\t", 
    "\t\t\t\t\tif( ! Object.keys(this.childNodes).length )", 
    "\t\t\t\t\t\tsetToValues( id, this.value(this) );", 
    "\t\t\t\t\t\t\t\t", 
    "\t\t\t\t\telse if( this.hasAttribute('prefset') )", 
    "\t\t\t\t\t\tsetToValues( id, getPrefsetValues(id) );", 
    "\t\t", 
    "\t\t\t\t\telse", 
    "\t\t\t\t\t\tloopNestedElements( $(this.childNodes) );", 
    "\t\t\t\t});", 
    "\t\t\t}; ", 
    "", 
    "\t\t\tloopNestedElements( self.$(selector).children() );", 
    "\t\t\t", 
    "\t\t\treturn values;", 
    "\t\t};", 
    "", 
    "\t\t/** Get sanitized id", 
    "\t\t */", 
    "\t\tvar sanitizeId = function(id)", 
    "\t\t{", 
    "\t\t\treturn id.replace(/[^a-z0-9\\s-_]/gi, '').replace(/\\s+/gi, '_').trim().toLowerCase();", 
    "\t\t};", 
    "\t", 
    "\t}", 
    "\treturn UI;", 
    "", 
    "})();"
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "async": false, 
  "type": "macro", 
  "trigger": "trigger_postopen"
}