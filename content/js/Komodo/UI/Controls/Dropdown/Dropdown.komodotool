{
  "keyboard_shortcut": "", 
  "name": "Dropdown", 
  "language": "JavaScript", 
  "trigger_enabled": false, 
  "value": [
    "/** Dropdown", 
    "*", 
    "*/", 
    "ko.extensions.TemplateExtension.Komodo.Controls.Dropdown = (function()", 
    "{", 
    "\tfunction Dropdown()", 
    "\t{", 
    "\t\tvar self\t= this;", 
    "\t\tvar $\t= require('ko/dom');", 
    "\t\tvar document\t= document;\t\t", 
    "\t\tvar dropdown; // main element", 
    "\t\t//var controlset_element;", 
    "\t\t/** Set document where Dropdown is operating, pane or preferences window", 
    "\t\t *", 
    "\t\t * @param\tstring\t_document", 
    "\t\t * @return\tself ", 
    "\t\t */", 
    "\t\tthis.document = function(_document)", 
    "\t\t{", 
    "\t\t\tdocument = _document;", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "\t\t/** Set controlset_element", 
    "\t\t *", 
    "\t\t * @param\tstring\tcontrolset_element", 
    "\t\t * @return\tself ", 
    "\t\t */", 
    "\t\tthis.element = function(dropdown_selector)", 
    "\t\t{", 
    "\t\t\tdropdown = self.$( dropdown_selector );", 
    "\t\t\t//dropdown_selector = dropdown.element();", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** Query selector in document", 
    "\t\t * ", 
    "\t\t * @param\tstring\tselector\tSelector of node", 
    "\t\t * @param\tstring\tselector\tSelector of parent, if null, then current document is used", 
    "\t\t * ", 
    "\t\t * @return\ttype\t[QueryObject](https://docs.activestate.com/komodo/11/sdk/api/module-ko_dom-QueryObject.html)", 
    "\t\t */", 
    "\t\tthis.$ = function(selector)", 
    "\t\t{", 
    "\t\t\t//parent = parent ? this.$(parent).element() : document;", 
    "", 
    "\t\t\treturn $(selector, document);", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** create node", 
    "\t\t */", 
    "\t\tthis.newNode = function(type, attributes)", 
    "\t\t{", 
    "\t\t\treturn new ko.extensions.TemplateExtension.Komodo.Node()", 
    "\t\t\t\t\t\t\t\t\t\t .type(type)\t\t\t\t\t\t\t\t\t\t\t\t\t ", 
    "\t\t\t\t\t\t\t\t\t\t .attributes(attributes)", 
    "\t\t\t\t\t\t\t\t\t\t .get();", 
    "\t\t};", 
    "", 
    "\t\t/** Create dropdown element", 
    "\t\t * @param\tstring\tid\tId of dropdown element", 
    "\t\t * @param\tobject\titems\tItems for dropdown ", 
    "\t\t * @param\tstring\t[menu_text]\tText in dropdown menu button, if null then current item is shown", 
    "\t\t *", 
    "\t\t * @return\t[element](https://developer.mozilla.org/en-US/docs/Web/API/Element)", 
    "\t\t *", 
    "\t\t * @example dropdown('#dropdown_test',\t{'Item A':'alert(\"A\")','Item B':'alert(\"B\")'})", 
    "\t\t * @example dropdown('#dropdown_text_test',\t{'Item A':{tooltip: 'Item A'},'Item B':{style: 'border:green;'}}, 'Attributes & label')", 
    "\t\t *", 
    "\t\t */", 
    "\t\tthis.create = function(id, items, menu_text=null)", 
    "\t\t{", 
    "\t\t\tdropdown\t= menu_text ? self.newNode('button', {label: menu_text, type: \"menu\", id: sanitizeId(id) }) : self.newNode('menulist', {id: sanitizeId(id)});", 
    "\t\t\tvar menupopup\t= self.newNode('menupopup');", 
    "", 
    "\t\t\t/** Get item simple", 
    "\t\t\t */", 
    "\t\t\tvar getItemSimple = function(label, _attributes)", 
    "\t\t\t{", 
    "\t\t\t\tvar attributes = {label: label};", 
    "\t\t\t\t", 
    "\t\t\t\tif( typeof _attributes === 'object' ){", 
    "\t\t\t\t\tfor(var attr in _attributes)", 
    "\t\t\t\t\t\tif (_attributes.hasOwnProperty(attr))", 
    "\t\t\t\t\t\t\tattributes[attr] = _attributes[attr];", 
    "\t\t\t\t\t\t\t//var value = _attributes[attr];", 
    "\t\t\t\t}else", 
    "\t\t\t\t\tattributes.oncommand = _attributes;", 
    "\t\t\t\t", 
    "\t\t\t\treturn self.newNode('menuitem', attributes );", 
    "\t\t\t}; ", 
    "\t\t\t", 
    "\t\t\tfor(var label in items)", 
    "\t\t\t\tif (items.hasOwnProperty(label))", 
    "\t\t\t\t\tmenupopup.appendChild( getItemSimple(label, items[label]) );", 
    "\t\t\t\t\t", 
    "\t\t\tdropdown.appendChild( menupopup );", 
    "\t\t\t", 
    "\t\t\treturn  dropdown;", 
    "\t\t};", 
    "\t\t/** Get sanitized id", 
    "\t\t */", 
    "\t\tvar sanitizeId = function(id)", 
    "\t\t{", 
    "\t\t\treturn id.replace(/[^a-z0-9\\s-_]/gi, '').replace(/\\s+/gi, '_').trim().toLowerCase();", 
    "\t\t};", 
    "\t}", 
    "\treturn Dropdown;", 
    "", 
    "})();"
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "async": false, 
  "type": "macro", 
  "trigger": "trigger_postopen"
}