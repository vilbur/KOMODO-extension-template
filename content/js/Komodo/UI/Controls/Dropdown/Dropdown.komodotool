{"keyboard_shortcut":"","name":"Dropdown","language":"JavaScript","trigger_enabled":false,"value":["/** Dropdown\r","*\r","*/\r","ko.extensions.TemplateExtension.Komodo.Controls.Dropdown = (function()\r","{\r","\tfunction Dropdown()\r","\t{\r","\t\tvar self\t= this;\r","\t\tvar $\t= require('ko/dom');\r","\t\tvar document\t= document;\t\t\r","\t\tvar dropdown;\t// main element\r","\t\tvar menupopup;\t// menupopup element\r","\r","\t\t/** Set document where Dropdown is operating, pane or preferences window\r","\t\t *\r","\t\t * @param\tstring\t_document\r","\t\t * @return\tself \r","\t\t */\r","\t\tthis.document = function(_document)\r","\t\t{\r","\t\t\tdocument = _document;\r","\t\t\treturn this;\r","\t\t};\r","\t\t/** Set controlset_element\r","\t\t *\r","\t\t * @param\tstring|element\tselector_or_element\r","\t\t * @return\tself \r","\t\t */\r","\t\tthis.element = function(selector_or_element)\r","\t\t{\r","\t\t\tdropdown\t= self.$( selector_or_element );\r","\t\t\tmenupopup\t= dropdown.find('menupopup').first();\r","\t\t\treturn this;\r","\t\t};\r","\t\t\r","\t\t/** Query selector in document\r","\t\t * \r","\t\t * @param\tstring\tselector\tSelector of node\r","\t\t * @param\tstring\tselector\tSelector of parent, if null, then current document is used\r","\t\t * \r","\t\t * @return\ttype\t[QueryObject](https://docs.activestate.com/komodo/11/sdk/api/module-ko_dom-QueryObject.html)\r","\t\t */\r","\t\tthis.$ = function(selector)\r","\t\t{\r","\t\t\t//parent = parent ? this.$(parent).element() : document;\r","\r","\t\t\treturn $(selector, document);\r","\t\t};\r","\t\t\r","\t\t/** create node\r","\t\t */\r","\t\tthis.newNode = function(type, attributes)\r","\t\t{\r","\t\t\treturn new ko.extensions.TemplateExtension.Komodo.Node()\r","\t\t\t\t\t\t\t\t\t\t .type(type)\t\t\t\t\t\t\t\t\t\t\t\t\t \r","\t\t\t\t\t\t\t\t\t\t .attributes(attributes)\r","\t\t\t\t\t\t\t\t\t\t .get();\r","\t\t};\r","\r","\t\t/** Create dropdown element\r","\t\t * @param\tstring\tid\tId of dropdown element\r","\t\t * @param\tobject\titems\tItems for dropdown \r","\t\t * @param\tstring\t[menu_text]\tText in dropdown menu button, if null then current item is shown\r","\t\t *\r","\t\t * @return\t[element](https://developer.mozilla.org/en-US/docs/Web/API/Element)\r","\t\t *\r","\t\t * @example dropdown('#dropdown_test',\t{'Item A':'alert(\"A\")','Item B':'alert(\"B\")'})\r","\t\t * @example dropdown('#dropdown_text_test',\t{'Item A':{tooltip: 'Item A'},'Item B':{style: 'border:green;'}}, 'Attributes & label')\r","\t\t *\r","\t\t */\r","\t\tthis.create = function(id, items, menu_text=null)\r","\t\t{\r","\t\t\tdropdown\t= menu_text ? self.newNode('button', {label: menu_text, type: \"menu\", id: sanitizeId(id) }) : self.newNode('menulist', {id: sanitizeId(id)});\r","\t\t\tmenupopup\t= self.newNode('menupopup');\r","\r","\t\t\t/** Get item simple\r","\t\t\t */\r","\t\t\tvar getItemSimple = function(label, _attributes)\r","\t\t\t{\r","\t\t\t\tvar attributes = {label: label};\r","\t\t\t\t\r","\t\t\t\tif( typeof _attributes === 'object' )\r","\t\t\t\t{\r","\t\t\t\t\tfor(var attr in _attributes)\r","\t\t\t\t\t\tif (_attributes.hasOwnProperty(attr))\r","\t\t\t\t\t\t\tattributes[attr] = _attributes[attr];\r","\t\t\t\t\t\t\t//var value = _attributes[attr];\r","\t\t\t\t}else\r","\t\t\t\t\tattributes.oncommand = _attributes;\r","\t\t\t\t\r","\t\t\t\treturn self.newNode('menuitem', attributes );\r","\t\t\t}; \r","\t\t\t\r","\t\t\tfor(var label in items)\r","\t\t\t\tif (items.hasOwnProperty(label))\r","\t\t\t\t\tmenupopup.appendChild( getItemSimple(label, items[label]) );\r","\t\t\t\t\t\r","\t\t\tdropdown.appendChild( menupopup );\r","\t\t\t\r","\t\t\treturn  dropdown;\r","\t\t};\r","\t\t\r","\t\t/** Select item in dropdown menu\r","\t\t * @param\tint\tindex\tIndex of menu element, last item if index < 0\r","\t\t *\r","\t\t * @return\tself\r","\t\t */\r","\t\tthis.select = function(index=null)\r","\t\t{\t\t\t\r","\t\t\tdropdown.element().selectedIndex = this.getIndex(index, 'loop');\r","\t\t\t\r","\t\t\treturn this;\r","\t\t};\r","\t\t/** Add item to menu\r","\t\t *\r","\t\t * @param\t{attr:value}\tattributes\tAttributes for menu item\r","\t\t * @param\tint\tindex\tIndex where to insert item, 'null' & '-1' append at last position\r","\t\t * @return self\r","\t\t */\r","\t\tthis.add = function(attributes, index=null, select=false)\r","\t\t{\r","\t\t\tvar menuitem\t= this.newNode('menuitem', attributes);\r","\t\t\t\r","\t\t\tindex \t=  index > -1 ? this.getIndex(index) : null;\r","\t\t\tconsole.log(  'Dropdown.add(): index=' + index );\r","\r","\t\t\tif( index && index>0 )\r","\t\t\t\tthis.getItem(index).before( menuitem );\r","\t\t\t\t\r","\t\t\telse\r","\t\t\t{\r","\t\t\t\tconsole.log(  index===null || index===-1 ? 'append' : 'prepend' );\r","\t\t\t\tmenupopup[ index===null || index===-1 ? 'append' : 'prepend']( menuitem );\r","\t\t\t}\r","\t\t\t\r","\t\t\tif( select!==false )\r","\t\t\t\tthis.select(index===null ? -1 : index); \t\r","\t\t\t\t\r","\t\t\t\t\r","\t\t\treturn this;\r","\t\t}; \r","\t\t/** Delete item at index\r","\t\t *  Next item is selected after delete, if last item is deleted then previous item is selected\r","\t\t *  \r","\t\t * @param\tint\tindex\tIndex of menu element, last item if index < 0\r","\t\t * @return self\r","\t\t */\r","\t\tthis.delete = function(_index=null)\r","\t\t{\r","\t\t\t//index\t= this.getIndex(index);\r","\t\t\tindex = _index ?  this.getIndex(_index) : this.current();\r","\r","\t\t\tvar is_last\t= this.count() === index +1;\r","\t\t\t\r","\t\t\tdropdown.element().removeItemAt( index );\r","\t\t\t\r","\t\t\tthis.select( is_last ? index-1 : index );\r","\t\t\t\r","\t\t\treturn this;\r","\t\t};\r","\t\t/** Count of items\r","\t\t */\r","\t\tthis.count = function()\r","\t\t{\r","\t\t\treturn dropdown.find( 'menupopup' )._elements[0].childNodes.length;\r","\t\t}; \r","\t\t/** Get item\r","\t\t * \r","\t\t */\r","\t\tthis.getItem = function(index)\r","\t\t{\r","\t\t\t//console.log(  'index: ' + index );\r","\t\t\treturn this.$( dropdown.find( 'menuitem' )._elements[index] );\r","\t\t\t//return dropdown.find( 'menuitem' )._elements[index];\r","\t\t};\r","\t\t/** Current index\r","\t\t * @return\tint\t\r","\t\t */\r","\t\tthis.current = function(property='selectedIndex')\r","\t\t{\r","\t\t\treturn dropdown.element()[property];\r","\t\t}; \r","\t\t/*---------------------------------------\r","\t\t\tPRIVATE\r","\t\t-----------------------------------------*/\r","\t\t/** Get index value\r","\t\t * @param\tint\tindex\tIndex of menu element\r","\t\t * @param\tmixed\tloop\tIf not null, then return first item if index is bigger then max index\r","\t\t * @return\tint\t\tReturn index, last index if 'index < 0', null if more then max index\r","\t\t */\r","\t\tthis.getIndex = function(index, loop=null)\r","\t\t{\r","\t\t\tvar max_index\t= self.count() -1;\r","\t\t\t\r","\t\t\tif( index < 0 )\r","\t\t\t\treturn max_index;\r","\t\t\t\t\r","\t\t\telse if( index > max_index )\r","\t\t\t\treturn loop ? 0 : null;\r","\t\t\t\t\r","\t\t\treturn index;\r","\t\t}; \r","\t\t\r","\t\t\r","\t\t/** Get sanitized id\r","\t\t */\r","\t\tvar sanitizeId = function(id)\r","\t\t{\r","\t\t\treturn id.replace(/[^a-z0-9\\s-_]/gi, '').replace(/\\s+/gi, '_').trim().toLowerCase();\r","\t\t};\r","\t\t\r","\t\t/** test\r","\t\t */\r","\t\tthis.test = function()\r","\t\t{\r","\t\t\talert( 'Dropdown.test()' );\r","\t\t};\r","\t}\r","\treturn Dropdown;\r","\r","})();"],"version":"1.0.12","rank":100,"async":false,"type":"macro","trigger":"trigger_postopen"}