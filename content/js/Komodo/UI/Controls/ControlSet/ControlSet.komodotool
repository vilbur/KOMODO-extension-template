{"keyboard_shortcut":"","name":"ControlSet","language":"JavaScript","trigger_enabled":false,"value":["/** ControlSet\r","* Manage extension`s ui elements\r","*\r","*/\r","ko.extensions.TemplateExtension.Komodo.Controls.ControlSet = (function()\r","{\r","\tfunction ControlSet()\r","\t{\r","\t\tvar self\t= this;\r","\t\tvar $\t= require('ko/dom');\r","\t\tvar document\t= document;\t\t\r","\r","\t\t/** Set document where ControlSet is operating, pane or preferences window\r","\t\t *\r","\t\t * @param\tstring\t_document\r","\t\t * @return\tself \r","\t\t */\r","\t\tthis.document = function(_document)\r","\t\t{\r","\t\t\talert( 'ControlSet.document()' );\r","\t\t\t\r","\t\t\t//document = _document;\r","\t\t\t//return this;\r","\t\t};\r","\r","\t\t/** Query selector in document\r","\t\t * \r","\t\t * @param\tstring\tselector\tSelector of node\r","\t\t * @param\tstring\tselector\tSelector of parent, if null, then current document is used\r","\t\t * \r","\t\t * @return\ttype\t[QueryObject](https://docs.activestate.com/komodo/11/sdk/api/module-ko_dom-QueryObject.html)\r","\t\t */\r","\t\tthis.$ = function(selector, parent=null)\r","\t\t{\r","\t\t\t//if( ! selector.match(/^[#\\.]/) )\r","\t\t\t//\tselector = '#' +selector;\r","\t\t\tparent = parent ? this.$(parent).element() : document;\r","\r","\t\t\treturn $(selector, parent);\r","\t\t};\r","\r","\t\t\r","\t\t/** create node\r","\t\t */\r","\t\tthis.create = function(type, attributes)\r","\t\t{\r","\t\t\treturn new ko.extensions.TemplateExtension.Komodo.Node()\r","\t\t\t\t\t\t\t\t\t\t .type(type)\t\t\t\t\t\t\t\t\t\t\t\t\t \r","\t\t\t\t\t\t\t\t\t\t .attributes(attributes)\r","\t\t\t\t\t\t\t\t\t\t .get();\r","\t\t};\r","\t\t\r","\t\t/** Create prefset dom with menu and toggable containers with controls.\r","\t\t * If exist, then prefset will be refreshed\r","\t\t *\r","\t\t * @param\tstring\tprefset_selector\tId of wrapper element where menu and all containers are inserted\r","\t\t * @param\tobject\tmarkup_template\tRepresentation of container xul structure\r","\t\t * @param\tobject\tcontainers_data\tData for pref set`s controls\r","\t\t *\r","\t\t * @example\r","\t\t *\t\tmarkup_template = { 'Prefset Caption': ['checkbox', 'textbox'] };\r","\t\t * \r","\t\t * \t\tcontainers_data = {\r","\t\t *\t\t\t'Container A':{\r","\t\t * \t\t\t\t'Control A':\ttrue,\r","\t\t * \t\t\t\tEnter Text A':\t'Foo Text A',\r","\t\t * \t\t\t}\r","\t\t * \t\t};\r","\t\t * \r","\t\t */\r","\t\tthis.load = function(prefset_selector, markup_template, containers_data)\r","\t\t{\r","\t\t\tvar containers\t= [];\r","\t\t\t\r","\t\t\tvar prefset_caption\t= Object.keys(markup_template).pop();\t\t\t\t\t\t\r","\t\t\tvar container_labels\t= Object.keys(containers_data);\t\t\r","\t\t\tvar container_class_shown\t= prefset_selector+'-shown';\r","\t\t\tmarkup_template\t= markup_template[prefset_caption];\r","\t\t\t\r","\t\t\t/* ELEMENTS */\r","\t\t\tvar menu_box\t= self.create('hbox');\r","\t\t\tvar menu\t= self.create('menulist');\r","\t\t\tvar menupopup\t= self.create('menupopup');\r","\t\t\tvar caption\t= self.create('caption', prefset_caption );\r","\r","\t\t\t/** Add remove container dropdown\r","\t\t\t */\r","\t\t\tvar add_remove_container_menu = (function()\r","\t\t\t{\r","\t\t\t\tvar menu\t= self.create('button', { type: 'menu' });\r","\t\t\t\tvar menupopup\t= self.create('menupopup');\r","\t\t\t\t\r","\t\t\t\t\tvar command_add =\r","\t\t\t\t\t[\r","\t\t\t\t\t\t'var UI = TemplateExtension().UI(document)',\r","\t\t\t\t\t\t//'UI.append( \"'+prefset_selector+'\", UI.create(\"button\", \"Test Append\") )',\r","\t\t\t\t\t\t'UI.controlsetAddRemove( \"'+prefset_selector+'\",\"add\")',\r","\t\t\t\t\t\t//'',\r","\t\t\t\t\t\t//\"alert('menu_item_add')\"\r","\t\t\t\t\t];\r","\t\t\t\t\tvar command_remove =\r","\t\t\t\t\t[\r","\t\t\t\t\t\t//\"if('command_remove')\"\r","\t\t\t\t\t];\r","\t\t\t\t\tvar menu_item_add\t= self.create('menuitem', { 'label': '+', 'oncommand': command_add.join(';')} );\r","\t\t\t\t\tvar menu_item_remove\t= self.create('menuitem', { 'label': '-', 'oncommand': command_remove.join(';')} );\r","\t\t\t\t\r","\t\t\t\t\t//console.log( menu_item );\r","\t\t\t\t\t//console.log( menu_item );\r","\t\t\t\t\tmenupopup.appendChild( menu_item_add );\r","\t\t\t\t\tmenupopup.appendChild( menu_item_remove );\r","\t\t\t\t\tmenu.appendChild( menupopup );\r","\t\t\t\t\t\r","\t\t\t\t\treturn menu;\r","\t\t\t})(); \r","\t\t\t/** Create markup_template\r","\t\t\t *\r","\t\t\t * @param\tobject\tcontrols_data\tContainer-id: {control id-label: value}\r","\t\t\t */\r","\t\t\tvar addMenuItem = function( container )\r","\t\t\t{\r","\t\t\t\t/** addMenuItem\r","\t\t\t\t */\r","\t\t\t\tvar addMenuItem = (function()\r","\t\t\t\t{\r","\t\t\t\t\tvar toggle_containers =\r","\t\t\t\t\t[\r","\t\t\t\t\t\t\"var container_class_shown='\"+container_class_shown+\"'\",\r","\t\t\t\t\t\t\"var element_hide=document.getElementsByClassName(container_class_shown)[0]\",\r","\t\t\t\t\t\t\"var element_show=document.getElementById('\"+container.getAttribute('id')+\"')\",\r","\t\t\t\t\t\t\r","\t\t\t\t\t\t\"if(element_hide==element_show)return\", // return if clicked same element\r","\t\t\t\t\t\t\r","\t\t\t\t\t\t\"element_show.classList.add(container_class_shown)\", // show new container\r","\t\t\t\t\t\t\"element_show.style.display = 'block'\",\r","\t\t\t\t\r","\t\t\t\t\t\t\"element_hide.classList.remove(container_class_shown)\", // hide old element\r","\t\t\t\t\t\t\"element_hide.style.display = 'none'\",\r","\t\t\t\t\t];\r","\t\t\t\t\t\r","\t\t\t\t\tvar menu_item\t= self.create('menuitem', { 'id': container.getAttribute('id')+'-item', 'label': container.getAttribute('label'), 'oncommand': toggle_containers.join(';')} );\r","\t\t\t\t\r","\t\t\t\t\tconsole.log( menu_item );\r","\t\t\t\t\tmenupopup.appendChild( menu_item );\r","\t\t\t\t})(); \r","\t\t\t\t\r","\t\t\t};\r","\t\t\t/** Compose menu\r","\t\t\t */\r","\t\t\tvar composeMenuBox = function()\r","\t\t\t{\r","\t\t\t\tmenu.appendChild( menupopup );\r","\t\t\t\tmenu_box.appendChild( menu );\r","\t\t\t\tmenu_box.appendChild( add_remove_container_menu );\r","\t\t\t}; \r","\t\t\t/** Create containers\r","\t\t\t */\r","\t\t\tvar createContainers = function()\r","\t\t\t{ \r","\t\t\t\tfor(let i=0; i<container_labels.length;i++){\r","\t\t\t\t\tvar container\t=  self.container( container_labels[i], markup_template, containers_data[container_labels[i]] );\r","\t\t\t\t\tcontainers.push( container );\r","\t\t\t\t\taddMenuItem(container);\r","\t\t\t\t}\r","\t\t\t}; \r","\t\t\t\r","\t\t\tcreateContainers();\r","\t\t\tcomposeMenuBox();\r","\t\t\t\r","\t\t\treturn [].concat.apply([caption,menu_box], containers);\r","\t\t\t//return [caption,menu_box];\r","\t\t};\r","\t\t/**  \r","\t\t *\t\r","\t\t */\r","\t\tthis.container = function(container_label, markup_template, controls_data)\r","\t\t{\r","\t\t\tvar controls_labels\t= Object.keys(controls_data);\r","\t\t\t\r","\t\t\t/** container\r","\t\t\t */\r","\t\t\tvar container = (function()\r","\t\t\t{\r","\t\t\t\tvar container\t= self.create( 'groupbox', {\r","\t\t\t\t\t\t\t\t\t\t'label': container_label,\t// sanitized label become id attribute, label is for save and restore element from prefs\r","\t\t\t\t\t\t\t\t\t\t'class': 'controlset-container',\t// class 'prefset-container' is for identification of container in prefset DOM\r","\t\t\t\t\t\t\t\t });\r","\t\t\t\treturn container;\r","\t\t\t})();\r","\t\t\t\r","\t\t\t/** Append control to container\r","\t\t\t */\r","\t\t\tvar appendControlToContainer = function(index)\r","\t\t\t{\r","\t\t\t\t//var control_type\t= markup_template[index];\r","\t\t\t\tvar control_data\t= {'label': controls_labels[index], 'value':controls_data[controls_labels[index]] };\r","\t\t\t\tvar control\t= self.create(markup_template[index], control_data);\r","\t\t\t\t\r","\t\t\t\t/** Add label if not checkbox \r","\t\t\t\t */\r","\t\t\t\tvar label_box = (function()\r","\t\t\t\t{\r","\t\t\t\t\tif( control.nodeName === 'checkbox' )\r","\t\t\t\t\t\treturn;\r","\t\t\t\t\t\r","\t\t\t\t\tvar hbox\t= self.create( 'hbox' );\r","\t\t\t\t\tvar label\t= self.create('label', {'value': controls_labels[index], 'control': control.getAttribute('id')});\r","\t\t\t\t\r","\t\t\t\t\thbox.appendChild( label );\r","\t\t\t\t\thbox.appendChild( control );\r","\t\t\t\t\t\r","\t\t\t\t\treturn hbox;\r","\t\t\t\t})(); \r","\t\t\t\t\r","\t\t\t\tcontainer.appendChild( label_box ? label_box : control );\r","\t\t\t};\r","\t\t\t\r","\t\t\tfor(let c=0; c<controls_labels.length;c++)\r","\t\t\t\tappendControlToContainer(c);\r","\t\t\t\t\r","\t\t\treturn container;\r","\t\t};\r","\t\t/** test\r","\t\t */\r","\t\tthis.test = function()\r","\t\t{\r","\t\t\talert( 'ControlSet.test()' );\r","\t\t}; \r","\t}\r","\treturn ControlSet;\r","\r","})();"],"version":"1.0.12","rank":100,"async":false,"type":"macro","trigger":"trigger_postopen"}