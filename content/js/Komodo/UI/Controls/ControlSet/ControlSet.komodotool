{
  "keyboard_shortcut": "", 
  "name": "ControlSet", 
  "language": "JavaScript", 
  "trigger_enabled": false, 
  "value": [
    "/** Create sets of controls switchable with dropdown menu", 
    " * ", 
    " *", 
    " * ", 
    " */", 
    "ko.extensions.TemplateExtension.Komodo.Controls.ControlSet = (function()", 
    "{", 
    "\tfunction ControlSet()", 
    "\t{", 
    "\t\tvar self\t= this;\t\t", 
    "\t\tvar document\t= document;\t\t", 
    "\t\tvar controlset;", 
    "", 
    "\t\t/** Set document where ControlSet is working, pane or preferences document", 
    "\t\t *", 
    "\t\t * @param\tstring\t_document", 
    "\t\t * @return\tself ", 
    "\t\t */", 
    "\t\tthis.document = function(_document)", 
    "\t\t{", 
    "\t\t\tdocument = _document;", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "\t\t/** Set controlset_selector", 
    "\t\t *", 
    "\t\t * @param\tstring\tcontrolset_selector", 
    "\t\t * @return\tself ", 
    "\t\t */", 
    "\t\tthis.element = function(controlset_selector)", 
    "\t\t{", 
    "\t\t\tcontrolset\t= require('ko/dom')(controlset_selector, document);", 
    "\t\t\t\t\t\t", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "", 
    "\t\t/** Create controlset dom with menu and toggable containers with controls.", 
    "\t\t * If exist, then controlset is refreshed", 
    "\t\t *", 
    "\t\t * @param\tobject\tcontainers_data\tData for controlset`s controls", 
    "\t\t * @return\tself\t", 
    "\t\t *", 
    "\t\t * @example", 
    "\t\t * \t\tcontainers_data = {", 
    "\t\t *\t\t\t'Container A':{", 
    "\t\t * \t\t\t\t'Control A':\ttrue,", 
    "\t\t * \t\t\t\tEnter Text A':\t'Foo Text A',", 
    "\t\t * \t\t\t}", 
    "\t\t * \t\t};", 
    "\t\t * ", 
    "\t\t */", 
    "\t\tthis.load = function(containers_data)", 
    "\t\t{", 
    "\t\t\tvar strToJson = function(str) {", 
    "\t\t\t\ttry {", 
    "\t\t\t\t\treturn JSON.parse(str);", 
    "\t\t\t\t} catch (e) {", 
    "\t\t\t\t\talert( \"Controlset: #\" + controlset_id + \" \\n\\nNot valid attibute 'template':\\n\\ntemplate=\"+controlset.attr('template') );", 
    "\t\t\t\t}", 
    "\t\t\t\treturn null;", 
    "\t\t\t};", 
    "\t\t\t\t\t\t", 
    "\t\t\tvar containers\t= [];", 
    "", 
    "\t\t\tvar controlset_id\t= controlset.attr('id');", 
    "\t\t\tvar prefset_caption\t= controlset.attr('caption');\t\t\t\t\t", 
    "\t\t\tvar is_adjustable\t= controlset.attr('adjust') === 'true';", 
    "\t\t\t\t\t\t", 
    "\t\t\tvar markup_template\t= strToJson( controlset.attr('template') );", 
    "", 
    "\t\t\tvar container_labels\t= Object.keys(containers_data).sort();", 
    "\t\t\t", 
    "\t\t\t/* MENU ELEMENTS ELEMENTS */", 
    "\t\t\tvar menu_box\t= newNode('hbox');", 
    "\t\t\tvar menu_main\t= newNode('menulist');", 
    "\t\t\tvar menu_adjust\t= newNode('button', { type: 'menu' });", 
    "\t\t\t", 
    "\t\t\t/** Create containers", 
    "\t\t\t */", 
    "\t\t\tvar createContainers = function()", 
    "\t\t\t{", 
    "\t\t\t\tfor(let i=0; i<container_labels.length;i++)", 
    "\t\t\t\t\tcontainers.push( createContainer( container_labels[i], markup_template, containers_data[container_labels[i]] ) );", 
    "\t\t\t}; ", 
    "\t\t\t/** Create main menu", 
    "\t\t\t */", 
    "\t\t\tvar createMainMenu = function()", 
    "\t\t\t{", 
    "\t\t\t\tvar menupopup\t= newNode('menupopup');", 
    "\t\t\t\t", 
    "\t\t\t\tfor(let i=0; i<containers.length;i++)", 
    "\t\t\t\t\tmenupopup.appendChild( getMenuItem(containers[i]) );", 
    "", 
    "\t\t\t\tmenu_main.appendChild(menupopup);", 
    "\t\t\t}; ", 
    "\t\t\t", 
    "\t\t\t/** Compose menu", 
    "\t\t\t */", 
    "\t\t\tvar createAdjustMenu = function()", 
    "\t\t\t{", 
    "\t\t\t\tif( ! is_adjustable )", 
    "\t\t\t\t\treturn; ", 
    "\t\t\t\t", 
    "\t\t\t\tvar menupopup\t= newNode('menupopup');", 
    "\t\t\t", 
    "\t\t\t\tvar command_add = [", 
    "\t\t\t\t\t'var UI = TemplateExtension().UI(document)',", 
    "\t\t\t\t\t'UI.controlset().element( \"#'+controlset_id+'\" ).add()',", 
    "\t\t\t\t];", 
    "\t\t\t\t", 
    "\t\t\t\tvar command_remove = [", 
    "\t\t\t\t\t'var UI = TemplateExtension().UI(document)',", 
    "\t\t\t\t\t'UI.controlset().element( \"#'+controlset_id+'\" ).remove()',", 
    "\t\t\t\t];", 
    "\t\t\t\t", 
    "\t\t\t\tvar menu_item_add\t= newNode('menuitem', { 'label': '+', 'oncommand': command_add.join(';')} );", 
    "\t\t\t\tvar menu_item_remove\t= newNode('menuitem', { 'label': '-', 'oncommand': command_remove.join(';')} );", 
    "\t\t\t", 
    "\t\t\t\tmenupopup.appendChild( menu_item_add );", 
    "\t\t\t\tmenupopup.appendChild( menu_item_remove );", 
    "\t\t\t\t", 
    "\t\t\t\tmenu_adjust.appendChild( menupopup );", 
    "\t\t\t};", 
    "\t\t\t/** Add caption", 
    "\t\t\t */", 
    "\t\t\tvar addCaption = function()", 
    "\t\t\t{", 
    "\t\t\t\tcontrolset.append( newNode('caption', prefset_caption));", 
    "\t\t\t}; ", 
    "\t\t\t/** Compose menu", 
    "\t\t\t */", 
    "\t\t\tvar addMenus = function()", 
    "\t\t\t{", 
    "\t\t\t\tmenu_box.appendChild( menu_main );", 
    "\t\t\t\t", 
    "\t\t\t\tif( is_adjustable )", 
    "\t\t\t\t\tmenu_box.appendChild( menu_adjust );", 
    "\t\t\t\t", 
    "\t\t\t\tcontrolset.append( menu_box );", 
    "\t\t\t};", 
    "\t\t\t/** Add containers", 
    "\t\t\t */", 
    "\t\t\tvar addContainers = function()", 
    "\t\t\t{", 
    "\t\t\t\tfor(let i=0; i<containers.length;i++)", 
    "\t\t\t\t\tcontrolset.append(containers[i]);", 
    "\t\t\t}; ", 
    "\t\t\t", 
    "\t\t\tcreateContainers();", 
    "\t\t\tcreateMainMenu();", 
    "\t\t\tcreateAdjustMenu();", 
    "\t\t\t", 
    "\t\t\tcontrolset.empty();", 
    "\t\t\t", 
    "\t\t\taddCaption();", 
    "\t\t\taddMenus();", 
    "\t\t\taddContainers();", 
    "", 
    "\t\t\tconsole.log( controlset.element().outerHTML ); // DEBUG: get element as plain text", 
    "", 
    "\t\t\tsetControlSetAttribute();", 
    "\t\t\treturn this; ", 
    "\t\t};", 
    "\t\t/** Set control set attribute for identification on pref data", 
    "\t\t */", 
    "\t\tvar setControlSetAttribute = function()", 
    "\t\t{", 
    "\t\t\tcontrolset.attr('controlset', 'true');", 
    "\t\t}; ", 
    "", 
    "\t\t/** Add new container by markup template", 
    "\t\t * @param\tstring\tcontainer_label\tLabel of container shown in dropdown", 
    "\t\t * @return\tself ", 
    "\t\t */", 
    "\t\tthis.add  = function(container_label=null)", 
    "\t\t{", 
    "\t\t\t//var dropdown\t= this.dropdown();", 
    "", 
    "\t\t\tif( ! container_label )", 
    "\t\t\t\tcontainer_label\t= require(\"ko/dialogs\").prompt('Add new set name');", 
    "\t\t\t\t", 
    "\t\t\tif( ! container_label )", 
    "\t\t\t\treturn;", 
    "\t\t\t", 
    "\t\t\tvar markup_template\t= JSON.parse( controlset.attr('template') );", 
    "", 
    "\t\t\tvar container = createContainer(container_label, markup_template);", 
    "\t\t\t", 
    "\t\t\tthis.dropdown().add( getMenuItemAttributes(container) );", 
    "\t\t\t//dropdown().add( self.getMenuItemAttributes(container) );", 
    "", 
    "\t\t\tcontrolset.append( container );", 
    "\t\t\t", 
    "\t\t\tthis.select(-1);", 
    "\t\t\t", 
    "\t\t\treturn this; ", 
    "\t\t}; ", 
    "\t\t/** Remove container", 
    "\t\t * @param\tint\tindex\tIndex of container to remove, if null, then current is removed", 
    "\t\t * @return\tself", 
    "\t\t */", 
    "\t\tthis.remove  = function(index=null)", 
    "\t\t{", 
    "\t\t\tvar dropdown\t= this.dropdown();", 
    "", 
    "\t\t\tvar current_index\t= index ? index : dropdown.current();", 
    "\t\t\tvar current_label\t= dropdown.getMenuElement(current_index).attr('label');", 
    "\t\t\t//console.log(  'current_index: ' + current_index );", 
    "\t\t\t//console.log(  'current_label: ' + current_label );", 
    "", 
    "\t\t\tif( ! require(\"ko/dialogs\").confirm(\"Remove set '\" + current_label +\"' ?\") )", 
    "\t\t\t\treturn; ", 
    "\t\t\t", 
    "\t\t\tdropdown.delete();", 
    "\t\t\t", 
    "\t\t\tcontrolset.find('.controlset-container')._elements[current_index].remove();", 
    "\t\t\t", 
    "\t\t\tthis.select(current_index);", 
    "\t\t\t", 
    "\t\t\treturn this; ", 
    "\t\t}; ", 
    "\t\t/** Select item in menu and change visible container", 
    "\t\t * @param\tint\tindex\tIndex of menu element, select last item if select_index < 0", 
    "\t\t * @return\tself", 
    "\t\t */", 
    "\t\tthis.select = function(index)", 
    "\t\t{", 
    "\t\t\tvar dropdown\t= this.dropdown();", 
    "", 
    "\t\t\tindex = dropdown.getIndex(index, 'loop'); ", 
    "\t\t\t", 
    "\t\t\tdropdown.select( index );", 
    "\t\t\t", 
    "\t\t\t/* Hide containers  */", 
    "\t\t\tcontrolset.find('.controlset-container').each(function(i) // class 'controlset-container' is important, it is defined in ControlSet class", 
    "\t\t\t{", 
    "\t\t\t\tvar display\t= index==i ? 'block' : 'none';", 
    "\t\t\t\t", 
    "\t\t\t\tthis.classList.remove( 'shown' );", 
    "", 
    "\t\t\t\tthis.setAttribute('style', this.getAttribute('style').replace(/display:\\s*(none|block);/gi, '') + 'display:'+display+';');", 
    "", 
    "\t\t\t\tif( index==i )", 
    "\t\t\t\t\tthis.classList.add( 'shown' );", 
    "\t\t\t});", 
    "\t\t\treturn this; ", 
    "\t\t};", 
    "\t\t/** Get dropdown in control set", 
    "\t\t *", 
    "\t\t * @return\tobject [Dropdown](../Dropdown)", 
    "\t\t */", 
    "\t\tthis.dropdown = function()", 
    "\t\t{", 
    "\t\t\treturn new ko.extensions.TemplateExtension.Komodo.Controls.Dropdown()", 
    "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.element( controlset.find( 'menupopup').parent() );", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** test", 
    "\t\t */", 
    "\t\tthis.test = function()", 
    "\t\t{", 
    "\t\t\talert( 'ControlSet.test()' );", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** create node", 
    "\t\t */", 
    "\t\tvar newNode = function(type, attributes)", 
    "\t\t{", 
    "\t\t\treturn new ko.extensions.TemplateExtension.Komodo.Node()", 
    "\t\t\t\t\t\t\t\t\t\t .type(type)\t\t\t\t\t\t\t\t\t\t\t\t\t ", 
    "\t\t\t\t\t\t\t\t\t\t .attributes(attributes)", 
    "\t\t\t\t\t\t\t\t\t\t .get();", 
    "\t\t};", 
    "", 
    "\t\t/**  Get container dom", 
    "\t\t *", 
    "\t\t * @param\tstring\tcontainer_label\tLabel of container used in dropdown menu", 
    "\t\t * @param\tarray\tmarkup_template\tArray of control types of attribute objects for controls ", 
    "\t\t * @param\tobject\tcontrols_data\tValues for controls {'control label': 'value'}", 
    "\t\t *", 
    "\t\t * @return element", 
    "\t\t * ", 
    "\t\t * @example markup_template=[\"checkbox\", \"textbox\"]", 
    "\t\t * @example markup_template=[{\"type\": \"checkbox\": \"label\":\"Checkbox\" }, {\"type\": \"textbox\": \"label\":\"Enter Text\"}]", 
    "\t\t * ", 
    "\t\t */", 
    "\t\tvar createContainer = function(container_label, markup_template, controls_data=null)", 
    "\t\t{\t\t\t", 
    "\t\t\t//console.log('ControlSet.container()'); ", 
    "\t\t\tvar controls_data_labels = controls_data ? Object.keys(controls_data) : null;", 
    "\t\t\t", 
    "\t\t\t/* Merge markup_template & controls_data to one object ", 
    "\t\t\t */", 
    "\t\t\tmarkup_template = markup_template.map(function(attributes, index)", 
    "\t\t\t{", 
    "\t\t\t\tif( typeof attributes === 'string'   )", 
    "\t\t\t\t\tattributes = {type: attributes};", 
    "\t\t\t\t", 
    "\t\t\t\tif( controls_data )", 
    "\t\t\t\t\tattributes.label = controls_data_labels[index];", 
    "\t\t\t\t", 
    "\t\t\t\tif( controls_data )", 
    "\t\t\t\t\tattributes.value = controls_data[controls_data_labels[index]];", 
    "\t\t\t\t", 
    "\t\t\t\treturn attributes;", 
    "\t\t\t});", 
    "\t\t\t//console.log( markup_template );", 
    "\t\t", 
    "\t\t\t/** container", 
    "\t\t\t */", 
    "\t\t\tvar container = (function()", 
    "\t\t\t{", 
    "\t\t\t\tvar container\t= newNode( 'groupbox', {", 
    "\t\t\t\t\t\t\t\t\t\t'label': container_label,\t// sanitized label become id attribute, label is for save and restore element from prefs", 
    "\t\t\t\t\t\t\t\t\t\t'class': 'controlset-container',\t// class 'controlset-container' is for identification of container in controlset DOM", 
    "\t\t\t\t\t\t\t\t });", 
    "\t\t\t\t", 
    "\t\t\t\tcontainer.classList.add( container.getAttribute('id') );", 
    "\t\t\t\t", 
    "\t\t\t\treturn container;", 
    "\t\t\t})();", 
    "\t\t\t", 
    "\t\t\t/** Append control to container", 
    "\t\t\t */", 
    "\t\t\tvar appendControlToContainer = function(index)", 
    "\t\t\t{", 
    "\t\t\t\t//var type\t= markup_template[index].type;", 
    "\t\t\t\tvar control\t= newNode(markup_template[index].type, markup_template[index]);", 
    "\t\t\t\t", 
    "\t\t\t\t/** Add label if not checkbox ", 
    "\t\t\t\t */", 
    "\t\t\t\tvar label_box = (function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tif( markup_template[index].type === 'checkbox' )", 
    "\t\t\t\t\t\treturn;", 
    "\t\t\t\t\t", 
    "\t\t\t\t\tvar hbox\t= newNode( 'hbox' );", 
    "\t\t\t\t\tvar label\t= newNode( 'label', {'value': markup_template[index].label, 'control': control.getAttribute('id') });", 
    "\t\t\t\t", 
    "\t\t\t\t\thbox.appendChild( label );", 
    "\t\t\t\t\thbox.appendChild( control );", 
    "\t\t\t\t\t", 
    "\t\t\t\t\treturn hbox;", 
    "\t\t\t\t})(); ", 
    "\t\t\t\t", 
    "\t\t\t\tcontainer.appendChild( label_box ? label_box : control );", 
    "\t\t\t};", 
    "\t\t\t", 
    "\t\t\tfor(let c=0; c<markup_template.length;c++)", 
    "\t\t\t\tappendControlToContainer(c);", 
    "\t\t\t\t", 
    "\t\t\treturn container;", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** Create markup_template", 
    "\t\t *", 
    "\t\t * @param\tobject\tcontrols_data\tContainer-id: {control id-label: value}", 
    "\t\t */", 
    "\t\tvar getMenuItemAttributes = function( container )", 
    "\t\t{", 
    "\t\t\tvar toggle_containers =", 
    "\t\t\t[", 
    "\t\t\t\t\"var controlset\t= document.getElementById('\"+controlset.attr('id')+\"')\",", 
    "\t\t\t\t\"var containers\t= controlset.getElementsByClassName('controlset-container')\",", 
    "\t\t\t\t\"var element_show\t= containers['\"+container.getAttribute('id')+\"']\",", 
    "\t\t\t\t\"var element_hide\t= controlset.getElementsByClassName('shown')[0]\",", 
    "\t", 
    "\t\t\t\t\"if(element_hide==element_show)return\", // return if clicked same element", 
    "\t\t\t\t", 
    "\t\t\t\t\"element_show.classList.add('shown')\", // show new container", 
    "\t\t\t\t\"element_show.style.display = 'block'\",", 
    "\t\t\t\t", 
    "\t\t\t\t\"element_hide.classList.remove('shown')\", // hide old element", 
    "\t\t\t\t\"element_hide.style.display = 'none'\",", 
    "\t\t\t];", 
    "\t\t\t", 
    "\t\t\treturn {", 
    "\t\t\t\t'id': container.getAttribute('id')+'-item',", 
    "\t\t\t\t'label': container.getAttribute('label'),", 
    "\t\t\t\t'oncommand': toggle_containers.join(';')};", 
    "\t\t};", 
    "\t\t/** Create markup_template", 
    "\t\t *", 
    "\t\t * @param\tobject\tcontrols_data\tContainer-id: {control id-label: value}", 
    "\t\t */", 
    "\t\tvar getMenuItem = function( container )", 
    "\t\t{", 
    "\t\t\treturn newNode('menuitem', getMenuItemAttributes(container) );", 
    "\t\t};", 
    "\t\t/** Get sanitized id", 
    "\t\t */", 
    "\t\tvar sanitizeId = function(id)", 
    "\t\t{", 
    "\t\t\treturn id.replace(/[^a-z0-9\\s-_]/gi, '').replace(/\\s+/gi, '_').trim().toLowerCase();", 
    "\t\t};", 
    "\t\t ", 
    "\t}", 
    "\treturn ControlSet;", 
    "", 
    "})();"
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "async": false, 
  "type": "macro", 
  "trigger": "trigger_postopen"
}