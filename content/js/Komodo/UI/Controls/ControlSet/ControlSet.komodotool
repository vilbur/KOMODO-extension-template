{"keyboard_shortcut":"","name":"ControlSet","language":"JavaScript","trigger_enabled":false,"value":["/** Create sets of controls switchable with dropdown menu\r"," * \r"," *\r"," * \r"," */\r","ko.extensions.TemplateExtension.Komodo.Controls.ControlSet = (function()\r","{\r","\tfunction ControlSet()\r","\t{\r","\t\tvar self\t= this;\t\t\r","\t\tvar document\t= document;\t\t\r","\t\tvar controlset;\r","\r","\t\t/** Set document where ControlSet is working, pane or preferences document\r","\t\t *\r","\t\t * @param\tstring\t_document\r","\t\t * @return\tself \r","\t\t */\r","\t\tthis.document = function(_document)\r","\t\t{\r","\t\t\tdocument = _document;\r","\t\t\treturn this;\r","\t\t};\r","\t\t/** Set controlset_selector\r","\t\t *\r","\t\t * @param\tstring\tcontrolset_selector\r","\t\t * @return\tself \r","\t\t */\r","\t\tthis.element = function(controlset_selector)\r","\t\t{\r","\t\t\tcontrolset\t= require('ko/dom')(controlset_selector, document);\r","\t\t\t\t\r","\t\t\tif( ! controlset.exists() )\r","\t\t\t\tconsole.log( 'ControlSetDoes not exists\\n\\n'+controlset_selector );\r","\t\t\t\r","\t\t\t\t\t\t\r","\t\t\treturn this;\r","\t\t};\r","\r","\t\t/** Create controlset dom with menu and toggable containers with controls.\r","\t\t * If exist, then controlset is refreshed\r","\t\t *\r","\t\t * @param\tobject\tcontainers_data\tData for controlset`s controls\r","\t\t * @return\tself\t\r","\t\t *\r","\t\t * @example\r","\t\t * \t\tcontainers_data = {\r","\t\t *\t\t\t'Container A':{\r","\t\t * \t\t\t\t'Control A':\ttrue,\r","\t\t * \t\t\t\tEnter Text A':\t'Foo Text A',\r","\t\t * \t\t\t}\r","\t\t * \t\t};\r","\t\t * \r","\t\t */\r","\t\tthis.load = function(containers_data)\r","\t\t{\r","\t\t\tconsole.log('ControlSet.load');\r","\t\t\tconsole.log( containers_data );\r","\t\t\t\r","\r","\t\t\t\r","\t\t\tvar strToJson = function(str) {\r","\t\t\t\ttry {\r","\t\t\t\t\treturn JSON.parse(str);\r","\t\t\t\t} catch (e) {\r","\t\t\t\t\talert( \"Controlset: #\" + controlset_id + \" \\n\\nNot valid attibute 'template':\\n\\ntemplate=\"+controlset.attr('template') );\r","\t\t\t\t}\r","\t\t\t\treturn null;\r","\t\t\t};\r","\t\t\t\t\t\t\r","\t\t\tvar containers\t= [];\r","\r","\t\t\tvar controlset_id\t= controlset.attr('id');\r","\t\t\tvar prefset_caption\t= controlset.attr('caption');\t\t\t\t\t\r","\t\t\tvar is_adjustable\t= controlset.attr('adjust') === 'true';\r","\t\t\t\t\t\t\r","\t\t\tvar markup_template\t= strToJson( controlset.attr('template') );\r","\r","\t\t\tvar container_labels\t= Object.keys(containers_data).sort();\r","\t\t\t\r","\t\t\t/* MENU ELEMENTS ELEMENTS */\r","\t\t\tvar menu_box\t= newNode('hbox');\r","\t\t\tvar menu_main\t= newNode('menulist');\r","\t\t\tvar menu_adjust\t= newNode('button', { type: 'menu' });\r","\t\t\t\r","\t\t\t/** Create containers\r","\t\t\t */\r","\t\t\tvar createContainers = function()\r","\t\t\t{\r","\t\t\t\tfor(let i=0; i<container_labels.length;i++)\r","\t\t\t\t\tcontainers.push( createContainer( container_labels[i], markup_template, containers_data[container_labels[i]] ) );\r","\t\t\t}; \r","\t\t\t/** Create main menu\r","\t\t\t */\r","\t\t\tvar createMainMenu = function()\r","\t\t\t{\r","\t\t\t\tvar menupopup\t= newNode('menupopup');\r","\t\t\t\t\r","\t\t\t\tfor(let i=0; i<containers.length;i++)\r","\t\t\t\t\tmenupopup.appendChild( getMenuItem(containers[i]) );\r","\r","\t\t\t\tmenu_main.appendChild(menupopup);\r","\t\t\t}; \r","\t\t\t/** Compose menu\r","\t\t\t */\r","\t\t\tvar createAdjustMenu = function()\r","\t\t\t{\r","\t\t\t\tif( ! is_adjustable )\r","\t\t\t\t\treturn; \r","\t\t\t\t\r","\t\t\t\tvar menupopup\t= newNode('menupopup');\r","\t\t\t\r","\t\t\t\tvar command_add = [\r","\t\t\t\t\t'var UI = TemplateExtension().UI(document)',\r","\t\t\t\t\t'UI.controlset().element( \"#'+controlset_id+'\" ).add()',\r","\t\t\t\t];\r","\t\t\t\t\r","\t\t\t\tvar command_remove = [\r","\t\t\t\t\t'var UI = TemplateExtension().UI(document)',\r","\t\t\t\t\t'UI.controlset().element( \"#'+controlset_id+'\" ).remove()',\r","\t\t\t\t];\r","\t\t\t\t\r","\t\t\t\tvar menu_item_add\t= newNode('menuitem', { 'label': '+', 'oncommand': command_add.join(';')} );\r","\t\t\t\tvar menu_item_remove\t= newNode('menuitem', { 'label': '-', 'oncommand': command_remove.join(';')} );\r","\t\t\t\r","\t\t\t\tmenupopup.appendChild( menu_item_add );\r","\t\t\t\tmenupopup.appendChild( menu_item_remove );\r","\t\t\t\t\r","\t\t\t\tmenu_adjust.appendChild( menupopup );\r","\t\t\t};\r","\t\t\t/** Add caption\r","\t\t\t */\r","\t\t\tvar addCaption = function()\r","\t\t\t{\r","\t\t\t\tcontrolset.append( newNode('caption', prefset_caption));\r","\t\t\t}; \r","\t\t\t/** Compose menu\r","\t\t\t */\r","\t\t\tvar addMenus = function()\r","\t\t\t{\r","\t\t\t\tmenu_box.appendChild( menu_main );\r","\t\t\t\t\r","\t\t\t\tif( is_adjustable )\r","\t\t\t\t\tmenu_box.appendChild( menu_adjust );\r","\t\t\t\t\r","\t\t\t\tcontrolset.append( menu_box );\r","\t\t\t};\r","\t\t\t/** Add containers\r","\t\t\t */\r","\t\t\tvar addContainers = function()\r","\t\t\t{\r","\t\t\t\tfor(let i=0; i<containers.length;i++)\r","\t\t\t\t\tcontrolset.append(containers[i]);\r","\t\t\t}; \r","\t\t\t\r","\t\t\tcreateContainers();\r","\t\t\tcreateMainMenu();\r","\t\t\tcreateAdjustMenu();\r","\t\t\t\r","\t\t\tcontrolset.empty();\r","\t\t\t\r","\t\t\taddCaption();\r","\t\t\taddMenus();\r","\t\t\taddContainers();\r","\r","\t\t\tconsole.log( controlset.element().outerHTML ); // DEBUG: get element as plain text\r","\r","\t\t\t//setControlSetAttribute();\r","\t\t\t\r","\t\t\tthis.select(0);\r","\t\t\treturn this; \r","\t\t};\r","\t\t///** Set control set attribute for identification on pref data\r","\t\t// */\r","\t\t//var setControlSetAttribute = function()\r","\t\t//{\r","\t\t//\tcontrolset.attr('controlset', 'true');\r","\t\t//}; \r","\r","\t\t/** Add new container by markup template\r","\t\t * @param\tstring\tcontainer_label\tLabel of container shown in dropdown\r","\t\t * @return\tself \r","\t\t */\r","\t\tthis.add  = function(container_label=null)\r","\t\t{\r","\t\t\t//var dropdown\t= this.dropdown();\r","\r","\t\t\tif( ! container_label )\r","\t\t\t\tcontainer_label\t= require(\"ko/dialogs\").prompt('Add new set name');\r","\t\t\t\t\r","\t\t\tif( ! container_label )\r","\t\t\t\treturn;\r","\t\t\t\r","\t\t\tvar markup_template\t= JSON.parse( controlset.attr('template') );\r","\r","\t\t\tvar container = createContainer(container_label, markup_template);\r","\t\t\t\r","\t\t\tthis.dropdown().add( getMenuItemAttributes(container) );\r","\t\t\t//dropdown().add( self.getMenuItemAttributes(container) );\r","\r","\t\t\tcontrolset.append( container );\r","\t\t\t\r","\t\t\tthis.select(-1);\r","\t\t\t\r","\t\t\treturn this; \r","\t\t}; \r","\t\t/** Remove container\r","\t\t * @param\tint\tindex\tIndex of container to remove, if null, then current is removed\r","\t\t * @return\tself\r","\t\t */\r","\t\tthis.remove  = function(index=null)\r","\t\t{\r","\t\t\tvar dropdown\t= this.dropdown();\r","\r","\t\t\tvar current_index\t= index ? index : dropdown.current();\r","\t\t\tvar current_label\t= dropdown.getMenuElement(current_index).attr('label');\r","\t\t\t//console.log(  'current_index: ' + current_index );\r","\t\t\t//console.log(  'current_label: ' + current_label );\r","\r","\t\t\tif( ! require(\"ko/dialogs\").confirm(\"Remove set '\" + current_label +\"' ?\") )\r","\t\t\t\treturn; \r","\t\t\t\r","\t\t\tdropdown.delete();\r","\t\t\t\r","\t\t\tcontrolset.find('.controlset-container')._elements[current_index].remove();\r","\t\t\t\r","\t\t\tthis.select(current_index);\r","\t\t\t\r","\t\t\treturn this; \r","\t\t}; \r","\t\t/** Select item in menu and change visible container\r","\t\t * @param\tint\tindex\tIndex of menu element, select last item if select_index < 0\r","\t\t * @return\tself\r","\t\t */\r","\t\tthis.select = function(index)\r","\t\t{\r","\t\t\tvar dropdown\t= this.dropdown();\r","\r","\t\t\tindex = dropdown.getIndex(index, 'loop'); \r","\t\t\t\r","\t\t\tdropdown.select( index );\r","\t\t\t\r","\t\t\t/* Hide containers  */\r","\t\t\tcontrolset.find('.controlset-container').each(function(i) // class 'controlset-container' is important, it is defined in ControlSet class\r","\t\t\t{\r","\t\t\t\tvar display\t= index==i ? 'block' : 'none';\r","\t\t\t\t\r","\t\t\t\tthis.classList.remove( 'shown' );\r","\r","\t\t\t\tthis.setAttribute('style', this.getAttribute('style').replace(/display:\\s*(none|block);/gi, '') + 'display:'+display+';');\r","\r","\t\t\t\tif( index==i )\r","\t\t\t\t\tthis.classList.add( 'shown' );\r","\t\t\t});\r","\t\t\treturn this; \r","\t\t};\r","\t\t/** Get dropdown in control set\r","\t\t *\r","\t\t * @return\tobject [Dropdown](../Dropdown)\r","\t\t */\r","\t\tthis.dropdown = function()\r","\t\t{\r","\t\t\treturn new ko.extensions.TemplateExtension.Komodo.Controls.Dropdown()\r","\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.element( controlset.find( 'menupopup').parent() );\r","\t\t};\r","\t\t\r","\t\t/** test\r","\t\t */\r","\t\tthis.test = function()\r","\t\t{\r","\t\t\talert( 'ControlSet.test()' );\r","\t\t};\r","\t\t\r","\t\t/** create node\r","\t\t */\r","\t\tvar newNode = function(type, attributes)\r","\t\t{\r","\t\t\treturn new ko.extensions.TemplateExtension.Komodo.Node()\r","\t\t\t\t\t\t\t\t\t\t .type(type)\t\t\t\t\t\t\t\t\t\t\t\t\t \r","\t\t\t\t\t\t\t\t\t\t .attributes(attributes)\r","\t\t\t\t\t\t\t\t\t\t .get();\r","\t\t};\r","\r","\t\t/**  Get container dom\r","\t\t *\r","\t\t * @param\tstring\tcontainer_label\tLabel of container used in dropdown menu\r","\t\t * @param\tarray\tmarkup_template\tArray of control types of attribute objects for controls \r","\t\t * @param\tobject\tcontrols_data\tValues for controls {'control label': 'value'}\r","\t\t *\r","\t\t * @return element\r","\t\t * \r","\t\t * @example markup_template=[\"checkbox\", \"textbox\"]\r","\t\t * @example markup_template=[{\"type\": \"checkbox\": \"label\":\"Checkbox\" }, {\"type\": \"textbox\": \"label\":\"Enter Text\"}]\r","\t\t * \r","\t\t */\r","\t\tvar createContainer = function(container_label, markup_template, controls_data=null)\r","\t\t{\t\t\t\r","\t\t\tconsole.log('ControlSet.container('+container_label+')'); \r","\t\t\tvar controls_data_labels = controls_data ? Object.keys(controls_data) : null;\r","\t\t\t\r","\t\t\t/* Merge markup_template & controls_data to one object \r","\t\t\t */\r","\t\t\tmarkup_template = markup_template.map(function(attributes, index)\r","\t\t\t{\r","\t\t\t\tif( typeof attributes === 'string'   )\r","\t\t\t\t\tattributes = {type: attributes};\r","\t\t\t\t\r","\t\t\t\tif( controls_data )\r","\t\t\t\t\tattributes.label = controls_data_labels[index];\r","\t\t\t\t\r","\t\t\t\tif( controls_data )\r","\t\t\t\t\tattributes.value = controls_data[controls_data_labels[index]];\r","\t\t\t\t\r","\t\t\t\treturn attributes;\r","\t\t\t});\r","\t\t\t//console.log( markup_template );\r","\t\t\r","\t\t\t/** container\r","\t\t\t */\r","\t\t\tvar container = (function()\r","\t\t\t{\r","\t\t\t\tvar container\t= newNode( 'groupbox', {\r","\t\t\t\t\t\t\t\t\t\t'label': container_label,\t// sanitized label become id attribute, label is for save and restore element from prefs\r","\t\t\t\t\t\t\t\t\t\t'class': 'controlset-container',\t// class 'controlset-container' is for identification of container in controlset DOM\r","\t\t\t\t\t\t\t\t });\r","\t\t\t\t\r","\t\t\t\tcontainer.classList.add( container.getAttribute('id') );\r","\t\t\t\t\r","\t\t\t\treturn container;\r","\t\t\t})();\r","\t\t\t\r","\t\t\t/** Append control to container\r","\t\t\t */\r","\t\t\tvar appendControlToContainer = function(index)\r","\t\t\t{\r","\t\t\t\t//var type\t= markup_template[index].type;\r","\t\t\t\tvar control\t= newNode(markup_template[index].type, markup_template[index]);\r","\t\t\t\t\r","\t\t\t\t/** Add label if not checkbox \r","\t\t\t\t */\r","\t\t\t\tvar label_box = (function()\r","\t\t\t\t{\r","\t\t\t\t\tif( markup_template[index].type === 'checkbox' )\r","\t\t\t\t\t\treturn;\r","\t\t\t\t\t\r","\t\t\t\t\tvar hbox\t= newNode( 'hbox' );\r","\t\t\t\t\tvar label\t= newNode( 'label', {'value': markup_template[index].label, 'control': control.getAttribute('id') });\r","\t\t\t\t\r","\t\t\t\t\thbox.appendChild( label );\r","\t\t\t\t\thbox.appendChild( control );\r","\t\t\t\t\t\r","\t\t\t\t\treturn hbox;\r","\t\t\t\t})(); \r","\t\t\t\t\r","\t\t\t\tcontainer.appendChild( label_box ? label_box : control );\r","\t\t\t};\r","\t\t\tconsole.log( markup_template );\r","\t\t\tfor(let c=0; c<markup_template.length;c++)\r","\t\t\t\tappendControlToContainer(c);\r","\t\t\t\t\r","\t\t\treturn container;\r","\t\t};\r","\t\t\r","\t\t/** Create markup_template\r","\t\t *\r","\t\t * @param\tobject\tcontrols_data\tContainer-id: {control id-label: value}\r","\t\t */\r","\t\tvar getMenuItemAttributes = function( container )\r","\t\t{\r","\t\t\tvar toggle_containers =\r","\t\t\t[\r","\t\t\t\t\"var controlset\t= document.getElementById('\"+controlset.attr('id')+\"')\",\r","\t\t\t\t\"var containers\t= controlset.getElementsByClassName('controlset-container')\",\r","\t\t\t\t\"var element_show\t= containers['\"+container.getAttribute('id')+\"']\",\r","\t\t\t\t\"var element_hide\t= controlset.getElementsByClassName('shown')[0]\",\r","\t\r","\t\t\t\t\"if(element_hide==element_show)return\", // return if clicked same element\r","\t\t\t\t\r","\t\t\t\t\"element_show.classList.add('shown')\", // show new container\r","\t\t\t\t\"element_show.style.display = 'block'\",\r","\t\t\t\t\r","\t\t\t\t\"element_hide.classList.remove('shown')\", // hide old element\r","\t\t\t\t\"element_hide.style.display = 'none'\",\r","\t\t\t];\r","\t\t\t\r","\t\t\treturn {\r","\t\t\t\t'id': container.getAttribute('id')+'-item',\r","\t\t\t\t'label': container.getAttribute('label'),\r","\t\t\t\t'oncommand': toggle_containers.join(';')};\r","\t\t};\r","\t\t/** Create markup_template\r","\t\t *\r","\t\t * @param\tobject\tcontrols_data\tContainer-id: {control id-label: value}\r","\t\t */\r","\t\tvar getMenuItem = function( container )\r","\t\t{\r","\t\t\treturn newNode('menuitem', getMenuItemAttributes(container) );\r","\t\t};\r","\t\t/** Get sanitized id\r","\t\t */\r","\t\tvar sanitizeId = function(id)\r","\t\t{\r","\t\t\treturn id.replace(/[^a-z0-9\\s-_]/gi, '').replace(/\\s+/gi, '_').trim().toLowerCase();\r","\t\t};\r","\t\t \r","\t}\r","\treturn ControlSet;\r","\r","})();"],"version":"1.0.12","rank":100,"async":false,"type":"macro","trigger":"trigger_postopen"}