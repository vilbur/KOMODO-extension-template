{"keyboard_shortcut":"","name":"UITest","language":"JavaScript","trigger_enabled":false,"value":["/** Test controls in pane\r"," *\r"," */\r","ko.extensions.TemplateExtension.UITest = {};\r","(function()\r","{\r","\tfunction UITest()\r","\t{\r","\t\tvar self\t= this;\r","\t\tvar paneUI\t= null;\r","\r","\t\t/*---------------------------------------\r","\t\t\tUITest TEST CONTROLS\r","\t\t-----------------------------------------\r","\t\t*/\r","\t\t/** Test controls init pane\r","\t\t */\r","\t\tthis.TestControls_ReinitPane = function()\r","\t\t{\r","\t\t\tthis.init();\r","\t\t};\r","\t\t\r","\t\t/*---------------------------------------\r","\t\t\tVALUES & PREFS TEST\r","\t\t-----------------------------------------\r","\t\t*/\r","\t\t/** Get values\r","\t\t */\r","\t\tthis.PrefsTest_getAllValuesTest = function()\r","\t\t{\r","\t\t\tconsole.log('getAllValuesTest'); \r","\t\t\tconsole.log( paneUI.values( '#TemplateExtension-pane') );\t\r","\t\t}; \r","\t\t/** Get prefs values\r","\t\t */\r","\t\tthis.PrefsTest_getPrefsValuesTest = function()\r","\t\t{\r","\t\t\tconsole.log('getPrefsValuesTest'); \r","\t\t\tconsole.log( paneUI.values( '#TemplateExtension-pane', 'prefs' ) );\r","\t\t};\r","\t\t/** PrefsTest_SavePrefs\r","\t\t */\r","\t\tthis.PrefsTest_SavePrefs = function()\r","\t\t{\r","\t\t\tvar values\t= paneUI.values( '#TemplateExtension-pane', 'prefs' ) ;\r","\t\t}; \r","\t\t\r","\t\t\r","\t\t/*---------------------------------------\r","\t\t\tCONTROL TESTS\r","\t\t-----------------------------------------\r","\t\t*/\r","\t\tthis.ControlTest_AddExistingControls = function()\r","\t\t{\r","\t\t\tcreateVbox('box_controls_exists', 'Controls exist');\r","\r","\t\t\tvar control\t= paneUI.create('caption',\t{label:\t'ControlsExistsTest'});\r","\t\t\t\r","\t\t\tconsole.log( control );\r","\t\t\tpaneUI.append( '#this_parent_should_not_exists',\tcontrol );\r","\t\t\tpaneUI.append( '#box_controls_exists',\tcontrol );\r","\t\t};\r","\t\t/** Add controls\r","\t\t */\r","\t\tthis.ControlTest_AddMainControls = function()\r","\t\t{\r","\t\t\t//paneUI.append('#controls_box', paneUI.create('textbox') );\r","\t\t\tcreateVbox('main_controls', 'Main controls');\r","\t\t\t\r","\t\t\tpaneUI.append('#main_controls',\r","\t\t\t\tpaneUI.create('checkbox', [\r","\t\t\t\t\t{label: 'Checkbox 1', prefs:false, value:true},\r","\t\t\t\t\t{label: 'Checkbox 2', prefs:false},\r","\t\t\t\t])\r","\t\t\t)\r","\t\t\t.append('#main_controls',\r","\t\t\t\tpaneUI.create('checkbox', [\r","\t\t\t\t\t{label: 'Checkbox prefs 1', checked:true},\r","\t\t\t\t\t{label: 'Checkbox prefs 2', prefs:true},\r","\t\t\t\t])\r","\t\t\t);\r","\t\t};\r","\t\t\r","\t\t/** Create pref set\r","\t\t */\r","\t\tthis.ControlTest_CreatePrefset = function()\r","\t\t{\r","\t\t\tcreateVbox('ui_test_prefset');\r","\t\t\t\r","\t\t\tvar template = {'Prefset test': ['checkbox', 'textbox']};\r","\t\t\tvar values   = {  \r","\t\t\t\t\t\t\t\t'Container A':{  \r","\t\t\t\t\t\t\t\t\t'Control A':    false,  \r","\t\t\t\t\t\t\t\t\t'Enter Text A':   'Foo Text A',  \r","\t\t\t\t\t\t\t\t},  \r","\t\t\t\t\t\t\t\t'Container B':{  \r","\t\t\t\t\t\t\t\t\t'Control B':    true,  \r","\t\t\t\t\t\t\t\t\t'Enter Text B':   '',  \r","\t\t\t\t\t\t\t\t}  \r","\t\t\t\t\t\t\t};\r","\t\t\r","\t\t\tpaneUI.createPrefSet('#ui_test_prefset', template, values );\r","\t\t};\r","\r","\t\t\r","\t\t\r","\t\t\r","\t\t/*---------------------------------------\r","\t\t\tPREPARE TEST CLASS AND PANE UI\r","\t\t-----------------------------------------\r","\t\t*/\r","\t\t/** Pane ui\r","\t\t * @return\tobject\tUI class in pane\r","\t\t */\r","\t\tvar setPaneUI = function()\r","\t\t{\r","\t\t\tvar document_pane\t= ko.extensions.TemplateExtension.Komodo.Document.get('pane');\r","\t\t\t\r","\t\t\tpaneUI = new ko.extensions.TemplateExtension.Komodo.UI().document(document_pane);\r","\t\t\t\r","\t\t\treturn paneUI;\r","\t\t};\r","\t\t/** Clear pane\r","\t\t */\r","\t\tvar clearPane = function()\r","\t\t{\r","\t\t\tpaneUI.$( '#TemplateExtension-pane > hbox:first-of-type' ).empty();\r","\t\t\t//paneUI.append( '#TemplateExtension-pane', [\r","\t\t\t//\tpaneUI.create('hbox'),\r","\t\t\t//]);\r","\t\t}; \r","\r","\t\t/** Create vbox\r","\t\t */\r","\t\tvar createVbox = function(id, caption=null)\r","\t\t{\t\t\t\t\r","\t\t\tif( paneUI.exists('#'+id) )\r","\t\t\t\treturn;\r","\t\t\t\t\t\r","\t\t\tpaneUI.append( '#TemplateExtension-pane > hbox',\r","\t\t\t\tpaneUI.create('vbox', {id: id, style:\"padding:5px\" })\r","\t\t\t);\r","\t\t\t\r","\t\t\tif( caption )\r","\t\t\tpaneUI.append( '#'+id,\r","\t\t\t\tpaneUI.create( 'caption', {label: caption} )\r","\t\t\t);\r","\t\t}; \r","\t\t/**  Loop this object and get functions wich has format of name: 'UiBoxName_ButtonName'\r","\t\t */\r","\t\tvar AddRunTestButtons = function()\r","\t\t{\r","\t\t\tfor(var key in self)\r","\t\t\t\tif (self.hasOwnProperty(key) && typeof self[key] === 'function' && key.match(/_/gi)  )\r","\t\t\t\t\t{\r","\t\t\t\t\t\tvar key_split\t= key.split('_');\r","\t\t\t\t\t\tvar box_id\t=  key_split[0].toLowerCase();\r","\r","\t\t\t\t\t\tcreateVbox( box_id, key_split[0].replace(/(\\w)([A-Z])/g, '$1 $2') );\r","\t\t\t\t\t\t\r","\t\t\t\t\t\tpaneUI.append( '#'+box_id, [\r","\t\t\t\t\t\t\tpaneUI.create('button',\t{label:\tkey_split[1].replace(/\\s*Test/g, '').replace(/(\\w)([A-Z])/g, '$1 $2'), oncommand: 'UITest().'+key+'()', tooltip:key+'()'}),\r","\t\t\t\t\t\t]);\r","\t\t\t\t\t}\r","\t\t};\r","\r","\t\t/** Clear Komodo Console pane\r","\t\t *  IF CONSOLE IS NOT DETACHED\r","\t\t */\r","\t\tvar consoleClear = function(clear_message='UITest')\r","\t\t{\r","\t\t\tvar consoleEL = document.getElementById('console-widget');\r","\t\t\tif(consoleEL)\r","\t\t\t{\r","\t\t\t\tconsoleEL.contentWindow.document.getElementById('output').innerHTML = '';\r","\t\t\t\tif(clear_message)\r","\t\t\t\t\trequire('ko/console').info(clear_message);\t\r","\t\t\t}\r","\t\t};\r","\t\t/** Remove controls\r","\t\t *  MUST BE EXECUTED BEFORE TEST\r","\t\t */\r","\t\tvar removeControls = function()\r","\t\t{\r","\t\t\tpaneUI.$( '#extension_test_controls' ).empty();\r","\t\t\tpaneUI.$( '#ui_test_controls' ).empty();\t\t\t\r","\t\t};\r","\t\t/** init\r","\t\t */\r","\t\tthis.init = function()\r","\t\t{\r","\t\t\tsetPaneUI();\r","\t\t\t\r","\t\t\tclearPane();\r","\t\t\t\r","\t\t\tconsoleClear();\r","\r","\t\t\tAddRunTestButtons();\r","\t\t};\r"," \r","\t\t\r","\t}\r","\treturn UITest;\r","\r","})().apply(ko.extensions.TemplateExtension.UITest);\r","\r","\r","function UITest()\r","{\r","\treturn ko.extensions.TemplateExtension.UITest;\r","}\r","\r","setTimeout( function(){\r","\tko.extensions.TemplateExtension.UITest.init();\r","}, 1000); "],"version":"1.0.12","rank":100,"async":false,"type":"macro","trigger":"trigger_postopen"}