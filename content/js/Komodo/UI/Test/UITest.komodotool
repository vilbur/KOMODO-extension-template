{
  "keyboard_shortcut": "", 
  "name": "UITest", 
  "language": "JavaScript", 
  "trigger_enabled": false, 
  "value": [
    "/** Test controls in pane", 
    " *", 
    " */", 
    "ko.extensions.TemplateExtension.UITest = {};", 
    "(function()", 
    "{", 
    "\tfunction UITest()", 
    "\t{", 
    "\t\tvar $\t= require('ko/dom');", 
    "\t\tvar self\t= this;", 
    "\t\t", 
    "\t\tvar prefs\t= ko.extensions.TemplateExtension.Komodo.Prefs.prefix('ui-test-');", 
    "\t\tvar paneUI\t= null;", 
    "\t\t", 
    "\t\t/** Test box selectors", 
    "\t\t */\t\t\t\t", 
    "\t\tvar document_id\t= '#TemplateExtension-'; ", 
    "\t\tvar cotrols_box_id\t= '#generated_examples';", 
    "\t\tvar document_name\t= ''; // 'pane|preferences'", 
    "\t\tvar document_selector\t= '';\t// E.G.: '#TemplateExtension-preferences'", 
    "\t\tvar cotrols_box\t= ''; // final selector of test box element E.G.: '#TemplateExtension-preferences #generated_example'", 
    "", 
    "\t\t/*---------------------------------------", 
    "\t\t\tUITest TEST CONTROLS", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** Test controls init pane", 
    "\t\t */", 
    "\t\tthis.TestUiTest_ReinitPane = function()", 
    "\t\t{", 
    "\t\t\tthis.init();", 
    "\t\t};", 
    "\t\t/** Test controls init pane", 
    "\t\t */", 
    "\t\tthis.TestUiTest_ClearConsole = function(clear_message='')", 
    "\t\t{", 
    "\t\t\tvar consoleEL = document.getElementById('console-widget');", 
    "\t\t\tif(consoleEL)", 
    "\t\t\t{", 
    "\t\t\t\tconsoleEL.contentWindow.document.getElementById('output').innerHTML = '';", 
    "\t\t\t\tif(clear_message)", 
    "\t\t\t\t\trequire('ko/console').info(clear_message);\t", 
    "\t\t\t}", 
    "\t\t};", 
    "\t\t", 
    "\t\t/*---------------------------------------", 
    "\t\t\tCONTROL TESTS", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\tthis.ControlTest_AddExistingControls = function()", 
    "\t\t{", 
    "\t\t\tcreateVbox('box_controls_exists', 'Controls exist');", 
    "", 
    "\t\t\tvar control\t= paneUI.create('caption',\t{label:\t'ControlsExistsTest'});", 
    "\t\t\t", 
    "\t\t\tconsole.log( control );", 
    "\t\t\tpaneUI.append( '#this_parent_should_not_exists',\tcontrol );", 
    "\t\t\tpaneUI.append( '#box_controls_exists',\tcontrol );", 
    "\t\t};", 
    "\t\t/** Add controls", 
    "\t\t */", 
    "\t\tthis.ControlTest_AddMainControls = function()", 
    "\t\t{", 
    "\t\t\t//paneUI.append('#controls_box', paneUI.create('textbox') );", 
    "\t\t\tcreateVbox('main_controls', 'Main controls');", 
    "\t\t\t", 
    "\t\t\tpaneUI.append('#main_controls',", 
    "\t\t\t\tpaneUI.create('textbox', {id: 'pref-test-string', value:'lorem ipsum'})", 
    "\t\t\t)", 
    "\t\t\t.append('#main_controls',", 
    "\t\t\t\tpaneUI.create('checkbox', [", 
    "\t\t\t\t\t{label: 'Checkbox 1', prefs:false, value:true},\t\t\t\t\t", 
    "\t\t\t\t\t{label: 'Checkbox 2', prefs:false},", 
    "\t\t\t\t])", 
    "\t\t\t)", 
    "\t\t\t.append('#main_controls',", 
    "\t\t\t\tpaneUI.create('checkbox', [", 
    "\t\t\t\t\t{label: 'Checkbox prefs 1', checked:true},", 
    "\t\t\t\t\t{label: 'Checkbox prefs 2', prefs:true},", 
    "\t\t\t\t])", 
    "\t\t\t);", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** Create pref set", 
    "\t\t */", 
    "\t\tthis.ControlTest_CreatePrefset = function()", 
    "\t\t{", 
    "\t\t\tcreateVbox('ui_test_prefset');", 
    "\t\t\t", 
    "\t\t\tvar template = {'Prefset test': ['checkbox', 'textbox']};", 
    "\t\t\tvar values   = {  ", 
    "\t\t\t\t\t\t\t\t'Container A':{  ", 
    "\t\t\t\t\t\t\t\t\t'Control A':    false,  ", 
    "\t\t\t\t\t\t\t\t\t'Enter Text A':   'Foo Text A',  ", 
    "\t\t\t\t\t\t\t\t},  ", 
    "\t\t\t\t\t\t\t\t'Container B':{  ", 
    "\t\t\t\t\t\t\t\t\t'Control B':    true,  ", 
    "\t\t\t\t\t\t\t\t\t'Enter Text B':   '',  ", 
    "\t\t\t\t\t\t\t\t}  ", 
    "\t\t\t\t\t\t\t};", 
    "\t\t", 
    "\t\t\tpaneUI.createPrefSet('#ui_test_prefset', template, values );", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** Create pref set", 
    "\t\t */", 
    "\t\tthis.ControlTest_CreateDopdown = function()", 
    "\t\t{", 
    "\t\t\tcreateVbox('ui_test_dropdown','Dropdown');", 
    "\t\t\t", 
    "\t\t\tpaneUI.append('#ui_test_dropdown',", 
    "\t\t\t\tpaneUI.dropdown('#dropdown_test',\t{'Item A':'alert(\"A\")','Item B':'alert(\"B\")'})", 
    "\t\t\t);", 
    "\t\t\t", 
    "\t\t\tpaneUI.append('#ui_test_dropdown',", 
    "\t\t\t\tpaneUI.dropdown('#dropdown_text_test', {'Item A':{tooltip: 'Item A'},'Item B':{tooltip: 'Item B'}}, 'Attributes & label')", 
    "\t\t\t);", 
    "", 
    "\t\t};", 
    "\t\t/*---------------------------------------", 
    "\t\t\tVALUES TESTS", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** Get values", 
    "\t\t */", 
    "\t\tthis.ValuesTest_getValuesFromDocumentTest = function()", 
    "\t\t{", 
    "\t\t\tconsole.log( paneUI.values() );\t", 
    "\t\t};", 
    "\t\t/** Get values", 
    "\t\t */", 
    "\t\tthis.ValuesTest_getValuesFromElementTest = function()", 
    "\t\t{", 
    "\t\t\tconsole.log( paneUI.values( document_selector) );\t", 
    "\t\t}; ", 
    "\t\t/** Get prefs values", 
    "\t\t */", 
    "\t\tthis.ValuesTest_setValueToElementTest = function()", 
    "\t\t{", 
    "\t\t\t//console.log('getPrefsValuesTest'); ", 
    "\t\t\tconsole.log( paneUI.values( document_selector, 'only-prefs' ) );", 
    "\t\t};", 
    "\t\t/** Get prefs values", 
    "\t\t */", 
    "\t\tthis.ValuesTest_setValuesByObjectTest = function()", 
    "\t\t{", 
    "\t\t\t//console.log('getPrefsValuesTest'); ", 
    "\t\t\tconsole.log( paneUI.values( document_selector, 'only-prefs' ) );", 
    "\t\t};", 
    "\t\t/*---------------------------------------", 
    "\t\t\tPREFS TESTS", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** PrefsTest_SavePrefs", 
    "\t\t */", 
    "\t\tthis.PrefsTest_SavePrefs = function()", 
    "\t\t{", 
    "\t\t\tvar values\t= paneUI.values( document_selector, 'only-prefs' );", 
    "\t\t\tconsole.log( values );", 
    "\t\t\tprefs.set(values);", 
    "\t\t}; ", 
    "\t\t/** PrefsTest_SavePrefs", 
    "\t\t */", 
    "\t\tthis.PrefsTest_LoadPrefs = function()", 
    "\t\t{", 
    "\t\t\t//var prefs\t= ko.extensions.TemplateExtension.Komodo.Prefs.prefix('ui-test-');", 
    "", 
    "\t\t\t//var values_data\t= paneUI.values( '#TemplateExtension-'+document_name, 'prefs' );", 
    "\t\t\tvar values\t= prefs.get();", 
    "\t\t\tconsole.log( values );", 
    "\t\t}; ", 
    "", 
    "\t\t/*---------------------------------------", 
    "\t\t\tPREPARE TEST CLASS AND PANE UI", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** Pane ui", 
    "\t\t * @return\tobject\tUI class in pane", 
    "\t\t */", 
    "\t\tvar setPaneUI = function()", 
    "\t\t{", 
    "\t\t\tvar _document\t= ko.extensions.TemplateExtension.Komodo.Document.get( document_name );", 
    "\t\t\t", 
    "\t\t\tpaneUI = new ko.extensions.TemplateExtension.Komodo.UI().document(_document);", 
    "\t\t\t", 
    "\t\t\treturn paneUI;", 
    "\t\t};", 
    "\t\t/** Clear pane", 
    "\t\t */", 
    "\t\tvar clearPane = function()", 
    "\t\t{", 
    "\t\t\t", 
    "\t\t\tif( ! paneUI.exists(cotrols_box) )", 
    "\t\t\t\tpaneUI.append( document_selector,", 
    "\t\t\t\t\tpaneUI.create('hbox', {id: 'generated_examples', style:\"padding:5px\" })", 
    "\t\t\t\t);", 
    "\t\t\t\t", 
    "\t\t\t//paneUI.$( document_selector +' hbox:first-of-type' ).empty();", 
    "\t\t\t//paneUI.append( '#TemplateExtension-'+document_name, [", 
    "\t\t\t//\tpaneUI.create('hbox'),", 
    "\t\t\t//]);", 
    "\t\t\t", 
    "\t\t}; ", 
    "", 
    "\t\t/** Create vbox", 
    "\t\t */", 
    "\t\tvar createVbox = function(id, caption=null)", 
    "\t\t{", 
    "\t\t\tvar selector\t= '#'+id;", 
    "\t\t\t", 
    "\t\t\tif( paneUI.exists(selector) )", 
    "\t\t\t\tpaneUI.$(selector).empty();", 
    "\t\t\t", 
    "\t\t\telse", 
    "\t\t\t\tpaneUI.append( cotrols_box,", 
    "\t\t\t\t\tpaneUI.create('vbox', {id: id, style:\"padding:5px\" })", 
    "\t\t\t\t);", 
    "\t\t\t", 
    "\t\t\tif( caption )", 
    "\t\t\t\tpaneUI.append( selector,", 
    "\t\t\t\t\tpaneUI.create( 'caption', {label: caption} )", 
    "\t\t\t\t);", 
    "\t\t}; ", 
    "\t\t/**  Loop this object and get functions wich has format of name: 'UiBoxName_ButtonName'", 
    "\t\t */", 
    "\t\tvar AddRunTestButtons = function()", 
    "\t\t{", 
    "\t\t\tvar dropdowns\t= {};", 
    "", 
    "\t\t\tcreateVbox( 'ui_test_methods', 'UITest methods' );", 
    "\t\t\t\t", 
    "\t\t\tfor(var method_name in self)", 
    "\t\t\t\tif (self.hasOwnProperty(method_name) && typeof self[method_name] === 'function' && method_name.match(/_/gi)  )", 
    "\t\t\t\t\t{", 
    "\t\t\t\t\t\tvar method_name_split\t= method_name.replace(/^test|test$/gi, '').replace(/(\\w)([A-Z])/g, '$1 $2').split('_');", 
    "\t\t\t\t\t\tvar dropdown_name\t= method_name_split[0].trim();", 
    "\t\t\t\t\t\t", 
    "\t\t\t\t\t\tif( ! dropdowns[dropdown_name] )", 
    "\t\t\t\t\t\t\tdropdowns[dropdown_name] = [];", 
    "\t\t\t\t\t\t", 
    "\t\t\t\t\t\tdropdowns[dropdown_name].push({label: method_name_split[1].trim(), oncommand: 'UITest().'+method_name+'()', tooltip: 'UITest.'+method_name+'()'});", 
    "\t\t\t\t\t}", 
    "\t\t\t\tfor(var dropdown in dropdowns)", 
    "\t\t\t\t\tif (dropdowns.hasOwnProperty(dropdown))", 
    "\t\t\t\t\t\tpaneUI.append( '#ui_test_methods',", 
    "\t\t\t\t\t\t\tpaneUI.dropdown( dropdown, dropdowns[dropdown], dropdown )", 
    "\t\t\t\t\t\t);", 
    "\t\t};", 
    "", 
    "\t\t/** Remove controls", 
    "\t\t *  MUST BE EXECUTED BEFORE TEST", 
    "\t\t */", 
    "\t\tvar removeControls = function()", 
    "\t\t{", 
    "\t\t\tpaneUI.$( '#extension_test_controls' ).empty();", 
    "\t\t\tpaneUI.$( '#ui_test_controls' ).empty();\t\t\t", 
    "\t\t};", 
    "\t\t/** init", 
    "\t\t */", 
    "\t\tthis.init = function(_document_name)", 
    "\t\t{", 
    "\t\t\tdocument_name\t= _document_name;", 
    "\t\t\tdocument_selector\t= document_id + document_name; ", 
    "\t\t\tcotrols_box\t= document_selector +' '+cotrols_box_id; // final selector of test box element", 
    "\t\t", 
    "\t\t\tsetPaneUI();", 
    "\t\t\t", 
    "\t\t\tclearPane();", 
    "\t\t\t", 
    "\t\t\t//this.TestUiTest_ClearConsole();", 
    "", 
    "\t\t\tAddRunTestButtons();", 
    "\t\t\t/* INIT TESTS */", 
    "\t\t\t//this.ControlTest_AddMainControls();", 
    "\t\t};", 
    " ", 
    "\t\t", 
    "\t}", 
    "\treturn UITest;", 
    "", 
    "})().apply(ko.extensions.TemplateExtension.UITest);", 
    "", 
    "", 
    "function UITest()", 
    "{", 
    "\treturn ko.extensions.TemplateExtension.UITest;", 
    "}", 
    "", 
    "//setTimeout( function(){", 
    "\t//ko.extensions.TemplateExtension.UITest.init('pane');", 
    "//}, 1000); "
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "async": false, 
  "type": "macro", 
  "trigger": "trigger_postopen"
}