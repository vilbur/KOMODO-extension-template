{
  "keyboard_shortcut": "", 
  "name": "UITest", 
  "language": "JavaScript", 
  "trigger_enabled": false, 
  "value": [
    "/** Test controls in pane", 
    " *", 
    " * Steps how to init in UI in documentation of method 'UITest.init()'", 
    " *", 
    " */", 
    "ko.extensions.TemplateExtension.UITest = {};", 
    "(function()", 
    "{", 
    "\tfunction UITest()", 
    "\t{", 
    "\t\tvar $\t= require('ko/dom');", 
    "\t\tvar self\t= this;", 
    "\t\t", 
    "\t\tvar prefs\t= ko.extensions.TemplateExtension.Komodo.Prefs.prefset('ui-test');", 
    "\t\tvar paneUI\t= null;", 
    "\t\t", 
    "\t\t/** Test box selectors", 
    "\t\t */\t\t\t\t", 
    "\t\tvar controls_box_id\t= 'generated_examples';", 
    "\t\tvar main_element\t= '';\t// E.G.: '#TemplateExtension-preferences'", 
    "\t\tvar controls_box\t= ''; // final selector of test box element E.G.: '#TemplateExtension-preferences #generated_example'", 
    "", 
    "\t\t/*---------------------------------------", 
    "\t\t\tUITest TEST CONTROLS", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** Test controls init pane", 
    "\t\t */", 
    "\t\tthis.InitUiTest_UiTest_btn = function()", 
    "\t\t{", 
    "\t\t\tconsole.log( 'InitUiTest_UiTest_btn' );  ", 
    "\t\t\tinitControlTestBox();", 
    "\t\t\t//this.init();", 
    "\t\t\tAddUiTestButtons();", 
    "\t\t\t", 
    "\t\t\t/* INIT TESTS */", 
    "\t\t\tthis.AddMainControls_ControlTest_dd();", 
    "\t\t};", 
    "\t\t/** Test controls init pane", 
    "\t\t */", 
    "\t\tthis.ClearConsole_UiTest_btn = function(clear_message='')", 
    "\t\t{", 
    "\t\t\tvar consoleEL = ko.windowManager.getMainWindow().document.getElementById('console-widget');", 
    "\t\t\tif(consoleEL)", 
    "\t\t\t{", 
    "\t\t\t\tconsoleEL.contentWindow.document.getElementById('output').innerHTML = '';", 
    "\t\t\t\tif(clear_message)", 
    "\t\t\t\t\trequire('ko/console').info(clear_message);\t", 
    "\t\t\t}", 
    "\t\t};", 
    "\t\t", 
    "\t\t/*---------------------------------------", 
    "\t\t\tCONTROL TESTS", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** Add controls", 
    "\t\t */", 
    "\t\tthis.AddMainControls_ControlTest_dd = function()", 
    "\t\t{", 
    "\t\t\t//paneUI.append('#controls_box', paneUI.create('textbox') );", 
    "\t\t\tcreateVbox('main_controls', 'Main controls');", 
    "\t\t\t", 
    "\t\t\tpaneUI.append('#main_controls',", 
    "\t\t\t\tpaneUI.create('textbox', {id: 'pref-test-string', value:'lorem ipsum'})", 
    "\t\t\t)", 
    "\t\t\t.append('#main_controls',", 
    "\t\t\t\tpaneUI.create('checkbox', [", 
    "\t\t\t\t\t{label: 'Checkbox 1', prefs:false, value:true},\t\t\t\t\t", 
    "\t\t\t\t\t{label: 'Checkbox 2', prefs:false},", 
    "\t\t\t\t])", 
    "\t\t\t)", 
    "\t\t\t.append('#main_controls',", 
    "\t\t\t\tpaneUI.create('checkbox', [", 
    "\t\t\t\t\t{label: 'Checkbox prefs 1', checked:true},", 
    "\t\t\t\t\t{label: 'Checkbox prefs 2', prefs:true},", 
    "\t\t\t\t])", 
    "\t\t\t);", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** Create pref set", 
    "\t\t */", 
    "\t\tthis.CreatePrefset_ControlTest_dd = function()", 
    "\t\t{", 
    "\t\t\tcreateVbox('ui_test_prefset');", 
    "\t\t\t", 
    "\t\t\tvar template = {'Prefset test': ['checkbox', 'textbox']};", 
    "\t\t\tvar values   = {  ", 
    "\t\t\t\t\t\t\t\t'Container A':{  ", 
    "\t\t\t\t\t\t\t\t\t'Control A':    false,  ", 
    "\t\t\t\t\t\t\t\t\t'Enter Text A':   'Foo Text A',  ", 
    "\t\t\t\t\t\t\t\t},  ", 
    "\t\t\t\t\t\t\t\t'Container B':{  ", 
    "\t\t\t\t\t\t\t\t\t'Control B':    true,  ", 
    "\t\t\t\t\t\t\t\t\t'Enter Text B':   '',  ", 
    "\t\t\t\t\t\t\t\t}  ", 
    "\t\t\t\t\t\t\t};", 
    "\t\t", 
    "\t\t\tpaneUI.createPrefSet('#ui_test_prefset', template, values );", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** Create pref set", 
    "\t\t */", 
    "\t\tthis.CreateDopdown_ControlTest_dd = function()", 
    "\t\t{", 
    "\t\t\tcreateVbox('ui_test_dropdown','Dropdown');", 
    "\t\t\t", 
    "\t\t\tpaneUI.append('#ui_test_dropdown',", 
    "\t\t\t\tpaneUI.dropdown('#dropdown_test',\t{'Item A':'alert(\"A\")','Item B':'alert(\"B\")'})", 
    "\t\t\t);", 
    "\t\t\t", 
    "\t\t\tpaneUI.append('#ui_test_dropdown',", 
    "\t\t\t\tpaneUI.dropdown('#dropdown_text_test', {'Item A':{tooltip: 'Item A'},'Item B':{tooltip: 'Item B'}}, 'Attributes & label')", 
    "\t\t\t);", 
    "\t\t};", 
    "\t\t/** Try add control to element which not exist", 
    "\t\t * It throws error", 
    "\t\t *\t", 
    "\t\t */", 
    "\t\tthis.AddExistingControls_ControlTest_dd = function()", 
    "\t\t{", 
    "\t\t\tcreateVbox('box_controls_exists', 'Controls exist');", 
    "", 
    "\t\t\tvar control\t= paneUI.create('caption',\t{label:\t'ControlsExistsTest'});", 
    "\t\t\t", 
    "\t\t\t//console.log( control );", 
    "\t\t\tpaneUI.append( '#this.should_not_exists_parent_dd',\tcontrol );", 
    "\t\t\tpaneUI.append( '#box_controls_exists',\tcontrol );", 
    "\t\t};", 
    "\t\t/*---------------------------------------", 
    "\t\t\tVALUES TESTS", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** Get values", 
    "\t\t */", 
    "\t\tthis.getValuesFromDocumentTest_ValuesTest_btn = function()", 
    "\t\t{", 
    "\t\t\tconsole.log( paneUI.values() );\t", 
    "\t\t};", 
    "\t\t/** Get values", 
    "\t\t */", 
    "\t\tthis.getValuesFromElementTest_ValuesTest_btn = function()", 
    "\t\t{", 
    "\t\t\tconsole.log( paneUI.values( main_element) );\t", 
    "\t\t}; ", 
    "\t\t/** Get prefs values", 
    "\t\t */", 
    "\t\tthis.setValueToElementTest_ValuesTest_btn = function()", 
    "\t\t{", 
    "\t\t\t//console.log('getPrefsValuesTest'); ", 
    "\t\t\tconsole.log( paneUI.values( main_element, 'only-prefs' ) );", 
    "\t\t};", 
    "\t\t/** Get prefs values", 
    "\t\t */", 
    "\t\tthis.setValuesByObjectTest_ValuesTest_btn = function()", 
    "\t\t{", 
    "\t\t\t//console.log('getPrefsValuesTest'); ", 
    "\t\t\tconsole.log( paneUI.values( main_element, 'only-prefs' ) );", 
    "\t\t};", 
    "\t\t/*---------------------------------------", 
    "\t\t\tPREFS TESTS", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** PrefsTest_SavePrefs", 
    "\t\t */", 
    "\t\tthis.SavePrefs_PrefsTest_dd = function()", 
    "\t\t{", 
    "\t\t\tvar values\t= paneUI.values( main_element, 'only-prefs' );", 
    "\t\t\tconsole.log( values );", 
    "\t\t\tprefs.set(values);", 
    "\t\t}; ", 
    "\t\t/** PrefsTest_SavePrefs", 
    "\t\t */", 
    "\t\tthis.LoadPrefs_PrefsTest_dd = function()", 
    "\t\t{", 
    "\t\t\tvar values\t= prefs.get();", 
    "\t\t\tconsole.log( values );", 
    "\t\t}; ", 
    "", 
    "\t\t/*---------------------------------------", 
    "\t\t\tPREPARE TEST CLASS AND PANE UI", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** Pane ui", 
    "\t\t * @return\tobject\tUI class in pane", 
    "\t\t */", 
    "\t\tvar setPaneUI = function(_document)", 
    "\t\t{", 
    "\t\t\tpaneUI = new ko.extensions.TemplateExtension.Komodo.UI().document(_document);", 
    "\t\t\t", 
    "\t\t\treturn paneUI;", 
    "\t\t};", 
    "\t\t/** Clear pane", 
    "\t\t */", 
    "\t\tvar initControlTestBox = function()", 
    "\t\t{", 
    "\t\t\tcontrols_box = main_element + ' #' + controls_box_id;", 
    "\t\t\tconsole.log(  'initControlTestBox: ' + controls_box );", 
    "\t\t\t", 
    "\t\t\tpaneUI.$( controls_box  ).delete();", 
    "\t\t\t", 
    "\t\t\tif( ! paneUI.exists(controls_box) )", 
    "\t\t\t\tpaneUI.append( main_element,", 
    "\t\t\t\t\tpaneUI.create('hbox', {id: controls_box_id, style:\"padding:5px; border: 1px solid lightblue\" })", 
    "\t\t\t\t);", 
    "\t\t\t\t", 
    "\t\t\t//paneUI.$( controls_box  ).empty();", 
    "\t\t}; ", 
    "", 
    "\t\t/** Create vbox", 
    "\t\t */", 
    "\t\tvar createVbox = function(id, caption=null)", 
    "\t\t{", 
    "\t\t\tvar selector\t= '#'+id;", 
    "\t\t\t", 
    "\t\t\tif( paneUI.exists(selector) )", 
    "\t\t\t\tpaneUI.$(selector).empty();", 
    "\t\t\t", 
    "\t\t\telse", 
    "\t\t\t\tpaneUI.append( controls_box,", 
    "\t\t\t\t\tpaneUI.create('vbox', {id: id, style:\"padding:5px\" })", 
    "\t\t\t\t);", 
    "\t\t\t", 
    "\t\t\tif( caption )", 
    "\t\t\t\tpaneUI.append( selector,", 
    "\t\t\t\t\tpaneUI.create( 'caption', {label: caption} )", 
    "\t\t\t\t);", 
    "\t\t}; ", 
    "\t\t/**  Loop this object and get functions wich has format of name: 'UiBoxName_ButtonName'", 
    "\t\t */", 
    "\t\tvar AddUiTestButtons = function()", 
    "\t\t{", 
    "\t\t\tvar controls\t= {button:[], dropdown:[]};", 
    "", 
    "\t\t\tfor(var method_name in self)", 
    "\t\t\t\tif (self.hasOwnProperty(method_name) && typeof self[method_name] === 'function' && method_name.match(/_/gi)  )", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar control_type\t= /_(btn|dd)/gi.exec(method_name).pop() === 'dd' ? 'dropdown' : 'button';", 
    "\t\t\t\t\tvar method_name_split\t= method_name.replace(/^test|test$/gi, '').replace(/(\\w)([A-Z])/g, '$1 $2').split('_');", 
    "\t\t\t\t\tvar method_prefix\t= method_name_split[1].trim();", 
    "\t\t\t\t\tvar attributes\t= {label: method_name_split[0].trim(), oncommand: 'UITest().'+method_name+'()', tooltip: 'UITest.'+method_name+'()'};", 
    "\t\t\t\t\t", 
    "\t\t\t\t\t", 
    "\t\t\t\t\tif( ! controls[control_type][method_prefix] )", 
    "\t\t\t\t\t\tcontrols[control_type][method_prefix] = [];", 
    "\t\t\t\t\t", 
    "\t\t\t\t\tcontrols[control_type][method_prefix].push(attributes);", 
    "\t\t\t\t\t", 
    "\t\t\t\t}", 
    "\t\t\t/** Add btunttons", 
    "\t\t\t */", 
    "\t\t\tvar addBtunttons = (function()", 
    "\t\t\t{", 
    "", 
    "\t\t\t\tfor(var control_box_label in controls.button)", 
    "\t\t\t\t\tif (controls.button.hasOwnProperty(control_box_label))", 
    "\t\t\t\t\t{", 
    "\t\t\t\t\t\tvar control_box\t= control_box_label.replace(/\\s/g, '_').toLowerCase();", 
    "\t\t\t\t\t\t", 
    "\t\t\t\t\t\tcreateVbox( control_box, control_box_label );", 
    "\t\t\t\t\t\t", 
    "\t\t\t\t\t\tpaneUI.append( '#'+control_box,", 
    "\t\t\t\t\t\t\tpaneUI.create( 'button', controls.button[control_box_label] )", 
    "\t\t\t\t\t\t);", 
    "\t\t\t\t\t}", 
    "\t\t\t\t\t\t", 
    "\t\t\t})(); ", 
    "\t\t\t", 
    "\t\t\t/** Add dropdowns", 
    "\t\t\t */", 
    "\t\t\tvar addDropdowns = (function()", 
    "\t\t\t{", 
    "\t\t\t\tcreateVbox( 'ui_test_methods', 'UITest methods' );", 
    "", 
    "\t\t\t\tfor(var dropdown in controls.dropdown)", 
    "\t\t\t\t\tif (controls.dropdown.hasOwnProperty(dropdown))", 
    "\t\t\t\t\t\tpaneUI.append( '#ui_test_methods',", 
    "\t\t\t\t\t\t\tpaneUI.dropdown( dropdown, controls.dropdown[dropdown], dropdown )", 
    "\t\t\t\t\t\t);", 
    "\t\t\t})(); ", 
    "\t\t};", 
    "", 
    "\t\t/** Remove controls", 
    "\t\t *  MUST BE EXECUTED BEFORE TEST", 
    "\t\t */", 
    "\t\tvar removeControls = function()", 
    "\t\t{", 
    "\t\t\tpaneUI.$( '#extension_test_controls' ).empty();", 
    "\t\t\tpaneUI.$( '#ui_test_controls' ).empty();\t\t\t", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** Find page element or first box|hbox|vbox in preferences window", 
    "\t\t */", 
    "\t\tvar getMainElementId = function(element)", 
    "\t\t{", 
    "\t\t\tvar _document\t= element.ownerDocument;", 
    "\t\t\t", 
    "\t\t\tif( element.parentNode.hasAttribute('id') )", 
    "\t\t\t\treturn '#'+ element.parentNode.getAttribute('id');", 
    "\t\t\t", 
    "\t\t\t/** Find page or window in document ", 
    "\t\t\t */", 
    "\t\t\tvar page_or_window = (function()", 
    "\t\t\t{", 
    "\t\t\t\tfor(let i=0; i<_document.childNodes.length;i++)", 
    "\t\t\t\t\tif( _document.childNodes[i].nodeName.match(/window|page/gi)  )", 
    "\t\t\t\t\t\treturn _document.childNodes[i];", 
    "\t\t\t})(); ", 
    "\t\t\t/** Find main box", 
    "\t\t\t * If not exits, then create ", 
    "\t\t\t */", 
    "\t\t\tvar findMainBoxId = function()", 
    "\t\t\t{", 
    "\t\t\t\tfor(let i=0; i<page_or_window.childNodes.length;i++)", 
    "\t\t\t\t\tif( page_or_window.childNodes[i].nodeName.match(/.box/gi) && page_or_window.childNodes[i].hasAttribute('id') )", 
    "\t\t\t\t\t\treturn page_or_window.childNodes[i].getAttribute('id');", 
    "\t\t\t\t\t", 
    "\t\t\t\t/* Create box if not found */", 
    "\t\t\t\tvar vbox\t= _document.createElement(\"vbox\");", 
    "\t\t\t\tvbox.setAttribute(\"id\", \"UITest-preference\");", 
    "\t\t\t\tpage_or_window.appendChild( vbox );", 
    "\t\t\t\treturn 'UITest-preference';", 
    "\t\t\t}; ", 
    "\t\t\t", 
    "\t\t\treturn '#'+( page_or_window.nodeName==='page' ? page_or_window.getAttribute('id') : findMainBoxId() );", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** init UITest controls with button", 
    "\t\t *", 
    "\t\t * @example markup in pane.xul or preferences.xul", 
    "\t\t * ", 
    "\t\t * \t<vbox id=\"UiTest-pane\"><!-- UiTest wrapper with id attribute - Not required, but bettwer if exists -->", 
    "\t\t * \t\t<button ", 
    "\t\t * \t\t\tlabel=\"UITest.ini()\"", 
    "\t\t * \t\t\tstyle=\"border:1px solid lightblue\"", 
    "\t\t * \t\t\toncommand=\"ko.windowManager.getMainWindow().ko.extensions.TemplateExtension.UITest.init(this);\"/>", 
    "\t\t * \t</vbox>", 
    "\t\t *", 
    "\t\t */", 
    "\t\tthis.init = function(init_button)", 
    "\t\t{", 
    "\t\t\tmain_element = getMainElementId(init_button);", 
    "", 
    "\t\t\tsetPaneUI(init_button.ownerDocument);", 
    "\t\t\t", 
    "\t\t\tpaneUI.delete(init_button);", 
    "", 
    "\t\t\tinitControlTestBox();", 
    "\t\t\t", 
    "\t\t\tthis.ClearConsole_UiTest_btn();", 
    "", 
    "\t\t\tAddUiTestButtons();", 
    "\t\t\t", 
    "\t\t\t/* INIT TESTS */", 
    "\t\t\tthis.AddMainControls_ControlTest_dd();", 
    "\t\t};", 
    "\t\t", 
    "\t}", 
    "\treturn UITest;", 
    "", 
    "})().apply(ko.extensions.TemplateExtension.UITest);", 
    "", 
    "/** Acces to class from UI ", 
    " *\t", 
    " */", 
    "function UITest()", 
    "{", 
    "\treturn ko.windowManager.getMainWindow().ko.extensions.TemplateExtension.UITest;", 
    "}"
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "async": false, 
  "type": "macro", 
  "trigger": "trigger_postopen"
}