{"keyboard_shortcut":"","name":"Prefs","language":"JavaScript","trigger_enabled":false,"value":["/** Get\\set\\delete preferece data\r"," * \r"," * NOTE: !!! Get values from prefs works after restart of Komodo after first setting\r"," * \r"," * @method\tself\tprefset( string prefset )\tSet prefset for all keys\r"," * \r"," * @method\tvoid\tset( string|object param1[, mixed param2] )\tSet prefs values\r"," * @method\tvoid\tget( string|array|object param1[, mixed param2] )\tGet prefs values\r"," * @method\tvoid\tdelete( string|array|object param1 )\tDelete prefs\r"," * \r"," */\r","(function() \r","{\r","\tfunction Prefs()\r","\t{ \r","\t\tvar self\t= this;\r","\t\tvar prefs_global\t= require(\"ko/prefs\");\r","\t\tvar prefset\t= null;\r","\t\tvar prefs\t= prefs_global;\r","\t\tvar pref_types\t= ['String', 'Boolean', 'Long', 'Double'];\r","\t\tvar prefset_key\t= '';\t\t\r","\t\t//var prefs\t= ko.prefs ? ko.prefs : require(\"ko/prefs\");\r","\t\r","\t\t/** Set prefset for every key\r","\t\t * Allow to all prefs keys to be prefixed\r","\t\t *\r","\t\t * @param\tstring\tprefix\r","\t\t * @return\tself \r","\t\t */\r","\t\tthis.prefset = function(_prefset_key='')\r","\t\t{\r","\t\t\t/** Get or set new prefset\r","\t\t\t */\r","\t\t\tvar getOrSetNewPrefset = function()\r","\t\t\t{\r","\t\t\t\t//console.log(  'getOrSetNewPrefset(): ' + prefset_key +' ' +prefs_global.hasPref(prefset_key) );\r","\t\t\t\tprefset = prefs_global.hasPref(prefset_key) ? prefs_global.getPref(prefset_key) :  prefs_global.setPref(prefset_key, Components.classes['@activestate.com/koPreferenceSet;1'].createInstance());\r","\t\t\t}; \r","\r","\t\t\tprefset_key = _prefset_key;\r","\t\t\t\r","\t\t\tif( prefset_key  )\r","\t\t\t\tgetOrSetNewPrefset();\r","\t\t\t\r","\t\t\tprefs = prefset_key ? prefset : prefs_global;\r","\t\t\t\r","\t\t\treturn this;\r","\t\t};\r","\t\t/** Set prefs values\r","\t\t * @param\tstring|object\tparam1\tKey or object with keys & values {key:'value'} for mass setting\r","\t\t * @param\tmixed\tparam2\tValue if param1 is not object\r","\t\t *\r","\t\t * @example set('key')\t// set by key\r","\t\t * @example set({key1:'default', key2:'default'})\t// set by object keys\r","\t\t */\r","\t\tthis.set = function(param1, param2=null)\r","\t\t{\r","\t\t\tcall('set', param1, param2 );\r","\t\t};\r","\t\t/** Get prefs values\r","\t\t * \r","\t\t * @param\tnull|string|array|object\tparam1\tKey, array or object of keys for mass getting, if null then get all prefs with prefset\r","\t\t * @param \tmixed\tparam2\tDefault value if param1 is not object\r","\t\t * return\tmixed\r","\t\t *\r","\t\t * @example get()\t// get by all ids with prefset\r","\t\t * @example get('key')\t// get by key\r","\t\t * @example get(['key1', 'key2'])\t// get by array of keys\r","\t\t * @example get({key1:'default', key2:'default'})\t// get by object keys\t\r","\t\t * \r","\t\t */\r","\t\tthis.get = function(param1=null, param2=null)\r","\t\t{\r","\t\t\tif( ! param1 )\r","\t\t\t\treturn this.get(prefs.getAllPrefIds());\r","\t\t\t\r","\t\t\tif( Array.isArray(param1)  )\r","\t\t\t\tparam1 = getObjectOfKeys(param1);\r","\t\t\t\r","\t\t\treturn call('get', param1, param2 );\t\t\t\r","\t\t};\r","\t\t/** Delete prefs\r","\t\t * @param\tstring|object\tparam1\tKey, array or object with keys & values {key:'value'} for mass setting, if null then delete all prefs with prefset\r","\t\t *\r","\t\t * @example delete()\t// delete by all ids with prefset\r","\t\t * @example delete('key')\t// delete by key\r","\t\t * @example delete(['key1', 'key2'])\t// delete by array of keys\r","\t\t * @example delete({key1:'', key2:''})\t// delete by object keys\t\r","\t\t */\r","\t\tthis.delete = function(param1=null)\r","\t\t{\r","\t\t\tif( ! param1 )\r","\t\t\t\treturn this.delete(getIdsByPrefix());\r","\t\t\t\r","\t\t\tif( Array.isArray(param1)  )\r","\t\t\t\tparam1 = getObjectOfKeys(param1);\r","\t\t\t\r","\t\t\tcall( 'delete', param1 );\r","\t\t};\r","\t\t\r","\t\t/** Call method\r","\t\t */\r","\t\tvar call = function(method, param1, param2=null)\r","\t\t{\r","\t\t\tvar result\t= {};\r","\t\t\t//console.log( 'Prefs.call:'+method +', ' + param1 + ', ' + param2 );\r","\t\t\t/** Call with prefset\r","\t\t\t */\r","\t\t\tvar callWithPrefix = function(key, value)\r","\t\t\t{\r","\t\t\t\treturn self[method+'Pref']( key, value );\r","\t\t\t}; \r","\t\t\t\r","\t\t\tif( typeof param1 === 'object' ){\r","\t\t\t\tfor(var key in param1)\r","\t\t\t\t\tif (param1.hasOwnProperty(key))\r","\t\t\t\t\t\tresult[key] = callWithPrefix( key, param1[key] );\r","\t\t\t}else\r","\t\t\t\treturn callWithPrefix( param1, param2 );\r","\r","\t\t\treturn result;\r","\t\t}; \r","\t\t/*---------------------------------------\r","\t\t\tGET\\SET\\DELETE pref per key\r","\t\t-----------------------------------------\r","\t\t*/\r","\t\t/** Set single pref\r","\t\t */\r","\t\tthis.setPref = function(key, value)\r","\t\t{\r","\t\t\tvar type = typeof value;\r","\r","\t\t\tif( type==='object' )\r","\t\t\t\tvalue = JSON.stringify(value);\r","\t\t\t\r","\t\t\tif ( type===\"number\" || type==='string' && value.match( /^\\d+(\\.\\d+)?$/) ){\r","\t\t\t\tif(value == Math.floor(value))\r","\t\t\t\t\tprefs.setLong(key, value );\r","\t\t\t\t\t\r","\t\t\t\telse\r","\t\t\t\t\tprefs.setDouble(key, value);\r","\t\t\t\t\t\t\r","\t\t\t}else if ( type==\"boolean\")\r","\t\t\t\tprefs.setBoolean( key,\tvalue );\r","\t\t\t\r","\t\t\telse\r","\t\t\t\tprefs.setString( key,\tvalue );\r","\t\t};\r","\t\t/** Get single pref\r","\t\t */\r","\t\tthis.getPref = function(key, value_default)\r","\t\t{\r","\t\t\t/** Get string or object\\array value \r","\t\t\t *\t@return\tstring|array|object  \r","\t\t\t */\r","\t\t\tthis.getString = function()\r","\t\t\t{\r","\t\t\t\t//console.log('getString()'); \r","\t\t\t\tif( ! prefs.hasStringPref(key) )\r","\t\t\t\t\treturn;\r","\t\t\t\t\r","\t\t\t\tvar value = prefs.getString(key);\r","\t\t\t\t\r","\t\t\t\tif( ! value.match(/^[{\\[]/) )\r","\t\t\t\t\treturn value;\r","\t\t\t\t\r","\t\t\t\treturn JSON.parse(value);\r","\r","\t\t\t}; \r","\t\t\tthis.getLong = function()\r","\t\t\t{\r","\t\t\t\tif( prefs.hasLongPref(key) )\r","\t\t\t\t\treturn prefs.getLong(key);\r","\t\t\t};\r","\t\t\tthis.getDouble = function()\r","\t\t\t{\r","\t\t\t\tif( prefs.hasDoublePref(key) )\r","\t\t\t\t\treturn prefs.getDouble(key);\r","\t\t\t}; \r","\t\t\tthis.getBoolean = function()\r","\t\t\t{\r","\t\t\t\tif( prefs.hasBooleanPref(key) )\r","\t\t\t\t\treturn prefs.getBoolean(key);\r","\t\t\t};\r","\t\t\t\r","\t\t\treturn (function()\r","\t\t\t{\r","\t\t\t\tfor(let i=0; i<pref_types.length;i++)\r","\t\t\t\t{\r","\t\t\t\t\tvar value\t= self['get'+pref_types[i]]();\r","\t\t\t\t\t//var value;\r","\t\t\t\t\t//try{\r","\t\t\t\t\t//\tvalue\t= self['get'+pref_types[i]]();\r","\t\t\t\t\t//}catch(e){}\r","\r","\t\t\t\t\tif(typeof value !== 'undefined')\r","\t\t\t\t\t\treturn value;\r","\t\t\t\t}\r","\t\t\t\treturn value_default;\r","\t\t\t})(); \r","\t\t\r","\t\t};\r","\t\t/** Delete single pref\r","\t\t */\r","\t\tthis.deletePref = function(key)\r","\t\t{\r","\t\t\tif( prefset_key && key === prefset_key )\r","\t\t\t\tprefs_global.deletePref(key);\r","\t\t\t\t\r","\t\t\telse\r","\t\t\t\tprefs.deletePref(key);\r","\t\t};\r","\t\t/*---------------------------------------\r","\t\t\tPRIVATE\r","\t\t-----------------------------------------\r","\t\t*/\r","\r","\t\t/** Convert array to object keys\r","\t\t *  @example  getObjectOfKeys(['key1', 'key2']) // return {key1:'', key2:''}\r","\t\t *\r","\t\t * @return\tobject\t\r","\t\t */\r","\t\tvar getObjectOfKeys = function(array)\r","\t\t{\r","\t\t\tvar keys\t= {}; \r","\t\t\tfor(let i=0; i<array.length;i++)\r","\t\t\t\tkeys[array[i]] = '';\r","\t\t\t\r","\t\t\treturn keys;\r","\t\t};\r","\t\t/** test\r","\t\t */\r","\t\tthis.test = function()\r","\t\t{\r","\t\t\talert( 'Prefs.test()' ); \r","\t\t}; \r","\t\t\r","\t}\r","\treturn Prefs;\r","\r","})().apply(ko.extensions.TemplateExtension.Komodo.Prefs);\r","\r","\r","/* NOTES:\r"," * \r"," * FULL LIST OF ko.prefs METHODS\r"," *\t\tclone\r"," *\t\tdeletePref\r"," *\t\tdump\r"," *\t\tgetAllPrefIds\r"," *\t\tgetBoolean\r"," *\t\tgetBooleanPref\r"," *\t\tgetDouble\r"," *\t\tgetDoublePref\r"," *\t\tgetLong\r"," *\t\tgetLongPref\r"," *\t\tgetPref\r"," *\t\tgetPrefIds\r"," *\t\tgetPrefType\r"," *\t\tgetString\r"," *\t\tgetStringPref\r"," *\t\thasBooleanPref\r"," *\t\thasDoublePref\r"," *\t\thasLongPref\r"," *\t\thasPref\r"," *\t\thasPrefHere\r"," *\t\thasStringPref\r"," *\t\tid\r"," *\t\tinheritFrom\r"," *\t\tisVital\r"," *\t\tparent\r"," *\t\tprefObserverService\r"," *\t\tQueryInterface\r"," *\t\treset\r"," *\t\tserialize\r"," *\t\tserializeToFile\r"," *\t\tserializeToFileFast \r"," *\t\tsetBoolean\r"," *\t\tsetBooleanPref\r"," *\t\tsetDouble\r"," *\t\tsetDoublePref\r"," *\t\tsetLong\r"," *\t\tsetLongPref\r"," *\t\tsetNonVital\r"," *\t\tsetPref\r"," *\t\tsetString\r"," *\t\tsetStringPref\r"," *\t\tsetValidation\r"," *\t\tupdate\r"," *\t\tvalidateLong\r"," *\t\tvalidateString\r"," */\r","\r",""],"version":"1.0.12","rank":100,"async":false,"type":"macro","trigger":"trigger_postopen"}