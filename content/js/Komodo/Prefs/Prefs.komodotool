{
  "keyboard_shortcut": "", 
  "name": "Prefs", 
  "language": "JavaScript", 
  "trigger_enabled": false, 
  "value": [
    "/** Get\\set\\delete preferece data", 
    " * ", 
    " * NOTE: !!! Get values from prefs works after restart of Komodo after first setting", 
    " * ", 
    " * @method\tself\tprefix( string prefix )\tSet prefix for all keys", 
    " * ", 
    " * @method\tvoid\tset( string|object param1[, mixed param2] )\tSet prefs values", 
    " * @method\tvoid\tget( string|array|object param1[, mixed param2] )\tGet prefs values", 
    " * @method\tvoid\tdelete( string|array|object param1 )\tDelete prefs", 
    " * ", 
    " */", 
    "(function() ", 
    "{", 
    "\tfunction Prefs()", 
    "\t{ ", 
    "\t\tvar prefs\t= require(\"ko/prefs\");", 
    "\t\tvar self\t= this;", 
    "\t\tvar pref_types\t= ['String', 'Boolean', 'Long', 'Double'];", 
    "\t\tvar prefix\t= '';\t\t", 
    "\t\t//var prefs\t= ko.prefs ? ko.prefs : require(\"ko/prefs\");", 
    "\t", 
    "\t\t/** Set prefix for every key", 
    "\t\t * Allow to all prefs keys to be prefixed", 
    "\t\t *", 
    "\t\t * @param\tstring\tprefix", 
    "\t\t * @return\tself ", 
    "\t\t */", 
    "\t\tthis.prefix = function(_prefix='')", 
    "\t\t{", 
    "\t\t\tprefix = _prefix;", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "\t\t/** Set prefs values", 
    "\t\t * @param\tstring|object\tparam1\tKey or object with keys & values {key:'value'} for mass setting", 
    "\t\t * @param\tmixed\tparam2\tValue if param1 is not object", 
    "\t\t *", 
    "\t\t * @example set('key')\t// set by key", 
    "\t\t * @example set({key1:'default', key2:'default'})\t// set by object keys", 
    "\t\t */", 
    "\t\tthis.set = function(param1, param2=null)", 
    "\t\t{", 
    "\t\t\tcall('set', param1, param2 );", 
    "\t\t};", 
    "\t\t/** Get prefs values", 
    "\t\t * ", 
    "\t\t * @param\tnull|string|array|object\tparam1\tKey, array or object of keys for mass getting, if null then get all prefs with prefix", 
    "\t\t * @param \tmixed\tparam2\tDefault value if param1 is not object", 
    "\t\t * return\tmixed", 
    "\t\t *", 
    "\t\t * @example get()\t// get by all ids with prefix", 
    "\t\t * @example get('key')\t// get by key", 
    "\t\t * @example get(['key1', 'key2'])\t// get by array of keys", 
    "\t\t * @example get({key1:'default', key2:'default'})\t// get by object keys\t", 
    "\t\t * ", 
    "\t\t */", 
    "\t\tthis.get = function(param1=null, param2=null)", 
    "\t\t{", 
    "\t\t\tif( ! param1 )", 
    "\t\t\t\treturn this.get(getIdsByPrefix());", 
    "\t\t\t", 
    "\t\t\tif( Array.isArray(param1)  )", 
    "\t\t\t\tparam1 = getObjectOfKeys(param1);", 
    "\t\t\t", 
    "\t\t\treturn call('get', param1, param2 );\t\t\t", 
    "\t\t};", 
    "\t\t/** Delete prefs", 
    "\t\t * @param\tstring|object\tparam1\tKey, array or object with keys & values {key:'value'} for mass setting, if null then delete all prefs with prefix", 
    "\t\t *", 
    "\t\t * @example delete()\t// delete by all ids with prefix", 
    "\t\t * @example delete('key')\t// delete by key", 
    "\t\t * @example delete(['key1', 'key2'])\t// delete by array of keys", 
    "\t\t * @example delete({key1:'', key2:''})\t// delete by object keys\t", 
    "\t\t */", 
    "\t\tthis.delete = function(param1=null)", 
    "\t\t{", 
    "\t\t\tif( ! param1 )", 
    "\t\t\t\treturn this.delete(getIdsByPrefix());", 
    "\t\t\t", 
    "\t\t\tif( Array.isArray(param1)  )", 
    "\t\t\t\tparam1 = getObjectOfKeys(param1);", 
    "\t\t\t", 
    "\t\t\tcall( 'delete', param1 );", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** Call method", 
    "\t\t */", 
    "\t\tvar call = function(method, param1, param2=null)", 
    "\t\t{", 
    "\t\t\tvar result\t= {};", 
    "", 
    "\t\t\t/** Call with prefix", 
    "\t\t\t */", 
    "\t\t\tvar callWithPrefix = function(key, value)", 
    "\t\t\t{", 
    "\t\t\t\treturn self[method+'Pref']( prefix + key, value );", 
    "\t\t\t}; ", 
    "\t\t\t", 
    "\t\t\tif( typeof param1 === 'object' ){", 
    "\t\t\t\tfor(var key in param1)", 
    "\t\t\t\t\tif (param1.hasOwnProperty(key))", 
    "\t\t\t\t\t\tresult[key] = callWithPrefix( key, param1[key] );", 
    "\t\t\t}else", 
    "\t\t\t\treturn callWithPrefix( param1, param2 );", 
    "", 
    "\t\t\treturn result;", 
    "\t\t}; ", 
    "\t\t/*---------------------------------------", 
    "\t\t\tGET\\SET\\DELETE pref per key", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** Set single pref", 
    "\t\t */", 
    "\t\tthis.setPref = function(key, value)", 
    "\t\t{", 
    "\t\t\tvar type = typeof value;", 
    "", 
    "\t\t\tif( type==='object' )", 
    "\t\t\t\tvalue = JSON.stringify(value);", 
    "\t\t\t", 
    "\t\t\tif ( type===\"number\" || type==='string' && value.match( /^\\d+(\\.\\d+)?$/) ){", 
    "\t\t\t\tif(value == Math.floor(value))", 
    "\t\t\t\t\tprefs.setLong(key, value );", 
    "\t\t\t\t\t", 
    "\t\t\t\telse", 
    "\t\t\t\t\tprefs.setDouble(key, value);", 
    "\t\t\t\t\t\t", 
    "\t\t\t}else if ( type==\"boolean\")", 
    "\t\t\t\tprefs.setBoolean( key,\tvalue );", 
    "\t\t\t", 
    "\t\t\telse", 
    "\t\t\t\tprefs.setString( key,\tvalue );", 
    "\t\t};", 
    "\t\t/** Get single pref", 
    "\t\t */", 
    "\t\tthis.getPref = function(key, value_default)", 
    "\t\t{", 
    "\t\t\t/** Get string or object\\array value ", 
    "\t\t\t *\t@return\tstring|array|object  ", 
    "\t\t\t */", 
    "\t\t\tthis.getString = function()", 
    "\t\t\t{", 
    "\t\t\t\tif( ! prefs.hasStringPref(key) )", 
    "\t\t\t\t\treturn; ", 
    "\t\t\t\t", 
    "\t\t\t\tvar value = prefs.getString(key);", 
    "\t\t\t\t", 
    "\t\t\t\tif( ! value.match(/^[{\\[]/) )", 
    "\t\t\t\t\treturn value;", 
    "\t\t\t\t", 
    "\t\t\t\treturn JSON.parse(value);", 
    "", 
    "\t\t\t}; ", 
    "\t\t\tthis.getLong = function()", 
    "\t\t\t{", 
    "\t\t\t\tif( prefs.hasLongPref(key) )", 
    "\t\t\t\t\treturn prefs.getLong(key);", 
    "\t\t\t};", 
    "\t\t\tthis.getDouble = function()", 
    "\t\t\t{", 
    "\t\t\t\tif( prefs.hasDoublePref(key) )", 
    "\t\t\t\t\treturn prefs.getDouble(key);", 
    "\t\t\t}; ", 
    "\t\t\tthis.getBoolean = function()", 
    "\t\t\t{", 
    "\t\t\t\tif( prefs.hasBooleanPref(key) )", 
    "\t\t\t\t\treturn prefs.getBoolean(key);", 
    "\t\t\t};", 
    "\t\t\t", 
    "\t\t\treturn (function()", 
    "\t\t\t{", 
    "\t\t\t\tfor(let i=0; i<pref_types.length;i++)", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar value\t= self['get'+pref_types[i]]();", 
    "", 
    "\t\t\t\t\tif(typeof value !== 'undefined')", 
    "\t\t\t\t\t\treturn value;", 
    "\t\t\t\t}", 
    "\t\t\t\treturn value_default;", 
    "\t\t\t})(); ", 
    "\t\t", 
    "\t\t};", 
    "\t\t/** Delete single pref", 
    "\t\t */", 
    "\t\tthis.deletePref = function(key)", 
    "\t\t{", 
    "\t\t\tif( prefs.hasPref(key) )", 
    "\t\t\t\tprefs.deletePref(key);", 
    "\t\t};", 
    "\t\t/*---------------------------------------", 
    "\t\t\tPRIVATE", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** Get all ids from prefs which match prefix", 
    "\t\t * @return\tarray Array of ids without prefix (prefix is added in this.get function)", 
    "\t\t * ", 
    "\t\t */", 
    "\t\tvar getIdsByPrefix = function()", 
    "\t\t{", 
    "\t\t\tvar string\t= prefs.dump();", 
    "\t\t\tvar matches_all\t= [];", 
    "\t\t\tvar last_match_end\t= 0; // end position of last match", 
    "\t\t", 
    "\t\t\twhile((match = new RegExp( ''+prefix + '([^\\\\s]+)', 'g').exec(string)) !== null)", 
    "\t\t\t{", 
    "\t\t\t\tstring\t= string.substring(match.index + match[0].length);", 
    "\t\t\t\tmatch.index\t= last_match_end = last_match_end + match.index + match[0].length;", 
    "\t\t\t\tmatches_all.push(match.pop());", 
    "\t\t\t}", 
    "\t\t\treturn matches_all;", 
    "\t\t};  ", 
    "\t\t/** Convert array to object keys", 
    "\t\t *  @example  getObjectOfKeys(['key1', 'key2']) // return {key1:'', key2:''}", 
    "\t\t *", 
    "\t\t * @return\tobject\t", 
    "\t\t */", 
    "\t\tvar getObjectOfKeys = function(array)", 
    "\t\t{", 
    "\t\t\tvar keys\t= {}; ", 
    "\t\t\tfor(let i=0; i<array.length;i++)", 
    "\t\t\t\tkeys[array[i]] = '';", 
    "\t\t\t", 
    "\t\t\treturn keys;", 
    "\t\t};", 
    "\t\t/** test", 
    "\t\t */", 
    "\t\tthis.test = function()", 
    "\t\t{", 
    "\t\t\talert( 'Prefs.test()' ); ", 
    "\t\t}; ", 
    "\t\t", 
    "\t}", 
    "\treturn Prefs;", 
    "", 
    "})().apply(ko.extensions.TemplateExtension.Komodo.Prefs);", 
    "", 
    "", 
    "/* NOTES:", 
    " * ", 
    " * FULL LIST OF ko.prefs METHODS", 
    " *\t\tclone", 
    " *\t\tdeletePref", 
    " *\t\tdump", 
    " *\t\tgetAllPrefIds", 
    " *\t\tgetBoolean", 
    " *\t\tgetBooleanPref", 
    " *\t\tgetDouble", 
    " *\t\tgetDoublePref", 
    " *\t\tgetLong", 
    " *\t\tgetLongPref", 
    " *\t\tgetPref", 
    " *\t\tgetPrefIds", 
    " *\t\tgetPrefType", 
    " *\t\tgetString", 
    " *\t\tgetStringPref", 
    " *\t\thasBooleanPref", 
    " *\t\thasDoublePref", 
    " *\t\thasLongPref", 
    " *\t\thasPref", 
    " *\t\thasPrefHere", 
    " *\t\thasStringPref", 
    " *\t\tid", 
    " *\t\tinheritFrom", 
    " *\t\tisVital", 
    " *\t\tparent", 
    " *\t\tprefObserverService", 
    " *\t\tQueryInterface", 
    " *\t\treset", 
    " *\t\tserialize", 
    " *\t\tserializeToFile", 
    " *\t\tserializeToFileFast ", 
    " *\t\tsetBoolean", 
    " *\t\tsetBooleanPref", 
    " *\t\tsetDouble", 
    " *\t\tsetDoublePref", 
    " *\t\tsetLong", 
    " *\t\tsetLongPref", 
    " *\t\tsetNonVital", 
    " *\t\tsetPref", 
    " *\t\tsetString", 
    " *\t\tsetStringPref", 
    " *\t\tsetValidation", 
    " *\t\tupdate", 
    " *\t\tvalidateLong", 
    " *\t\tvalidateString", 
    " */", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    ""
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "async": false, 
  "type": "macro", 
  "trigger": "trigger_postopen"
}