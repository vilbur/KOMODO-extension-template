{
  "keyboard_shortcut": "", 
  "name": "Controls", 
  "language": "JavaScript", 
  "trigger_enabled": false, 
  "value": [
    "if( typeof ko.extensions.TemplateExtension === 'undefined'  )", 
    "\tko.extensions.TemplateExtension = {};", 
    "\t", 
    "/** Controls", 
    "*/", 
    "ko.extensions.TemplateExtension.Controls = (function()", 
    "{", 
    "\t\t", 
    "\tfunction Controls(_parent_node=null)", 
    "\t{", 
    "\t\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(false).off(false) : require('ko/console');", 
    "\t\t", 
    "\t\tvar parent_node\t= typeof _parent_node === 'string' ? document.getElementById(_parent_node) : _parent_node;", 
    "\t\tvar prefix\t= 'te';", 
    "\t\tvar values\t= {};", 
    "", 
    "\t\t/** Get values of controls in parent node", 
    "\t\t * @return\t{id: value}\tObject of control`s ids and values", 
    "\t\t */", 
    "\t\tthis.getControlsValues = function()", 
    "\t\t{", 
    "\t\t\tvalues\t= {};", 
    "\t\t\t", 
    "\t\t\tsetValuesFormChildNodes(parent_node.childNodes);", 
    "\t\t\t", 
    "\t\t\treturn values;", 
    "\t\t};", 
    "\t\t/** Test", 
    "\t\t */", 
    "\t\tthis.toggleCheckbox = function(id)", 
    "\t\t{", 
    "\t\t\tvar checkbox \t= window.getElementById(id);\t", 
    "\t\t\tcheckbox.checked = ! checkbox.checked ;", 
    "\t\t};", 
    "\t\t/** add controls to parent node", 
    "\t\t */", 
    "\t\tthis.add = function(type, attributes)", 
    "\t\t{", 
    "\t\t\tconsole.log( this.constructor.parent );", 
    "\t\t\t", 
    "\t\t\tif( ! Array.isArray(attributes) )", 
    "\t\t\t\tattributes = [attributes];", 
    "\t\t\t", 
    "\t\t\tfor(let a=0; a<attributes.length;a++)", 
    "\t\t\t\taddControlToParent(type, attributes[a]);", 
    "\t\t};", 
    "\t\t/** remove", 
    "\t\t */", 
    "\t\tthis.remove = function(node)", 
    "\t\t{", 
    "", 
    "\t\t}; ", 
    "\t\t/** Remove all child nodes from parent_node", 
    "\t\t */", 
    "\t\tthis.empty = function()", 
    "\t\t{", 
    "\t\t\t//console.log( '*/Controls.empty()' );", 
    "\t\t\tvar elementList = parent_node.childNodes;", 
    "\t\t\t", 
    "\t\t\tfor(let i=elementList.length-1; i>-1;i--)", 
    "\t\t\t\tparent_node.removeChild(elementList[i]);", 
    "\t\t};", 
    "\t\t/** Set prefix for controls id`s", 
    "\t\t *", 
    "\t\t * @param\tstring\tprefix", 
    "\t\t * @return\tself ", 
    "\t\t */", 
    "\t\tthis.prefix = function(_prefix='')", 
    "\t\t{", 
    "\t\t\tprefix = _prefix;", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** Test", 
    "\t\t */", 
    "\t\tthis.test = function(string='node') {", 
    "\t\t\talert('ko.extensions.TemplateExtension.Controls(\"'+string+'\")');", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** addControl", 
    "\t\t */", 
    "\t\tvar addControlToParent = function(type, attributes)", 
    "\t\t{", 
    "\t\t\tvar control\t= new ko.extensions.TemplateExtension.Control()", 
    "\t\t\t\t\t\t\t\t\t\t\t\t\t .prefix(prefix)", 
    "\t\t\t\t\t\t\t\t\t\t\t\t\t .type(type)\t\t\t\t\t\t\t\t\t\t\t\t\t ", 
    "\t\t\t\t\t\t\t\t\t\t\t\t \t .attributes(attributes)", 
    "\t\t\t\t\t\t\t\t\t\t\t\t\t .get();", 
    "\t\t\tLogger.info(control, 'Controls: '+'control'); ", 
    "\t\t\tparent_node.appendChild(control);", 
    "\t\t};", 
    "\t\t/** Get values form child nodes", 
    "\t\t * @param\tarray\tchild_nodes\tElement list of child nodes", 
    "\t\t */", 
    "\t\tvar setValuesFormChildNodes = function(child_nodes)", 
    "\t\t{\t\t\t", 
    "\t\t\tfor(let i=0; i<child_nodes.length;i++)", 
    "\t\t\t{\t\t\t\t", 
    "\t\t\t\tif( ['textbox', 'checkbox'].indexOf( child_nodes[i].nodeName ) > -1 )", 
    "\t\t\t\t\tvalues[child_nodes[i].id] = child_nodes[i].nodeName == 'checkbox' ? child_nodes[i].checked : child_nodes[i].value;", 
    "\t\t\t\t", 
    "\t\t\t\telse if( child_nodes[i].childNodes )", 
    "\t\t\t\t\tsetValuesFormChildNodes(child_nodes[i].childNodes);", 
    "\t\t\t}", 
    "\t\t}; ", 
    "", 
    "\t}", 
    "\treturn Controls;", 
    "", 
    "})();"
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "async": false, 
  "type": "macro", 
  "trigger": "trigger_postopen"
}